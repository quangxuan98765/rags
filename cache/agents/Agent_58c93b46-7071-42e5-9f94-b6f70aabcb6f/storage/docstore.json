{"docstore/metadata": {"9ec3604b-9a31-4557-8bc8-a72b61eabd67": {"doc_hash": "3808dfaeb49867d0268bc0e82147981064738371c418f25e2f0db1cf80d82df9"}, "5442007a-ea21-466d-a600-3410ddb6e43a": {"doc_hash": "fa978866c89a61d72559f5070b616d81b27dc5697d6620006a2c5f3d32519040"}, "288e88b1-1570-45d6-bcce-1e58145e2728": {"doc_hash": "f85a7095c963d00afc3d482ab08caca5677108c1c4a160d3698aaeff145bed15"}, "c6807474-641e-4196-bb0b-1dbedff9327f": {"doc_hash": "dfc2e621736efa51205a2a1ba41d5c6e137c60c71a20fefe4972064e64bf3819"}, "e5bd3a03-8e5d-433c-b202-6b9dc83867cb": {"doc_hash": "c97edd4a0af125a6375ccf11e3e35705ceadaa7c3dc9a806a11483da2ba6a13e"}, "0c911227-57fa-4b8e-ba51-16ba67a514c2": {"doc_hash": "cd5d6c70556b560f2430d6a0138d3ae0012a524144f8fb76dee03bb5f87defc5"}, "30fa5668-f78e-45dd-97af-3bb10be09c12": {"doc_hash": "3beb6f13a1aebcabd03aff7a2010df4d129fc980cca5bb3e5da0da3a0de824ce"}, "f99f82ef-ae58-48c4-b894-33664dc5e720": {"doc_hash": "6acc7497b0caaf9e06c95d96ab4b51c234c5b7e6dc9b11de7ebd8e54d5a73d13"}, "aee45c45-154f-457e-960d-224f970c0dbf": {"doc_hash": "3b0aef15188d1f2ab64c8178b6bc0c5abee4dff832c0b3890fd4b9dceed51e7d"}, "f1ee026f-34f1-409a-9670-a18467d09a27": {"doc_hash": "e8ecb2a3b2ac050405bbbec90e21e7e0ceef6d37e3795bc68119d554e610627a"}, "1a7d4449-d5ee-45d0-883d-9b210a387c36": {"doc_hash": "e8e8ec65343c2082872f0d1d4bcb2a19d8153065b45a556d1bd20eeb30e0b2ca"}, "abcba890-1cef-481e-9759-ab57d50aca14": {"doc_hash": "a0e56b557b99b89df11f29b378380231753fccb59c694d561446f726aff91840"}, "324cead7-05de-4daf-9ede-5067534a5fda": {"doc_hash": "33bc2db6134ce146d59683b0df02872d6f37c770d31d4d196c54879f895ccdf5"}, "4a3369f8-4bf6-4381-a948-38364e8d8704": {"doc_hash": "298686f13ef3c0881ec443bdcdcbec1b8dce318f3d334082f1c10c48d2bbc5d2"}, "b50c50dd-b71f-4ed8-a606-f386a37778c5": {"doc_hash": "b49636c7141da1c69fd4886d9f25f9b583fb01db8341015134d7e7da63a78cae"}, "c7fa74bd-c3ca-419b-8cfe-eac07d9741e1": {"doc_hash": "c95822a99bc3a82773480aff623083d7193d0db3e44652616f72c66ea0643fb3"}, "a44f7418-5434-447b-9171-63ea3199f936": {"doc_hash": "4d214349d61ff1d8c6b47c02ca7d2c28bd7d4b983ad648338756634753041612"}, "f01b4871-1835-4944-a695-b1e57ed3484a": {"doc_hash": "2b8cd8bdfd7c1fbd8577157daca7902c4287da0da778f779378ce36584ebccd3"}, "590fe819-90f6-449f-b71c-d2e0ca8e6d78": {"doc_hash": "62e8a45dcd389938fe173bbc625846da0b95351c3cc9be298df5a0c9985198ea"}, "1b5d2055-b0bb-4f64-b0e6-c434be595952": {"doc_hash": "cd77215616c0d846ed81e0b69d9ec8adfed587889dfb6e5b82ba162172bfc3bd"}, "4573aa17-c9b8-4546-a654-7a40acaee3ca": {"doc_hash": "c74d3f5ae3807cabde459793b4d777544bd54819d62b7bf1831d0baa19c8acdc"}, "9185357c-0845-42b0-83a8-1b997675acfe": {"doc_hash": "e467ea8409ddfea60683479a6e326c31e4fccf0393c16bfc668550c58a3be297"}, "ccb91132-a660-46cf-9e1a-8720ccbf1e75": {"doc_hash": "8933414578b6993d557d305e5b89aa818605d70ec4190d8dfe04ab1a6c835808", "ref_doc_id": "9ec3604b-9a31-4557-8bc8-a72b61eabd67"}, "055f7911-f10d-414c-9b99-6c86b0bf5c76": {"doc_hash": "af3c3ff1f0efebfb2be58c03a643949f78345714db25164f16a0f5bf477cd226", "ref_doc_id": "9ec3604b-9a31-4557-8bc8-a72b61eabd67"}, "3ca4a663-9aa4-479c-91c5-84cb7201c78d": {"doc_hash": "d72ac610d233b9e940d8e8b673d1793ec263093576c7b7d61e16d71b3fc62b04", "ref_doc_id": "5442007a-ea21-466d-a600-3410ddb6e43a"}, "be30aa92-06a0-4d78-90be-6a86e202a92a": {"doc_hash": "600a890a25f2c1fe772f32dc938423a6578a7b40a216be48f5c121318c369371", "ref_doc_id": "5442007a-ea21-466d-a600-3410ddb6e43a"}, "c1ee4ff4-31d7-4119-9062-a6999afe2652": {"doc_hash": "bd7b61c4b0ee89226c27b4ab65e9866440ca5d7520a3a15ae5767b23f75b349d", "ref_doc_id": "288e88b1-1570-45d6-bcce-1e58145e2728"}, "3690a421-73f2-4c3e-8797-48cc02938368": {"doc_hash": "5a6abc352324d0733795c606ba9dbb620640e8458a8f1438afd1c735fea0de0d", "ref_doc_id": "288e88b1-1570-45d6-bcce-1e58145e2728"}, "33636abc-bb42-449e-9dca-85640ddfb282": {"doc_hash": "b17371f2ff92786481f82f71785d1e37a03156dc820471e56e8b779138dec702", "ref_doc_id": "288e88b1-1570-45d6-bcce-1e58145e2728"}, "0b99868a-ce55-4301-a3a9-6acfbce7558e": {"doc_hash": "939e2c6eb68879eba0ddc6ec7ba69000c17d6ccba82a237bd5c2729cc1bc29d3", "ref_doc_id": "c6807474-641e-4196-bb0b-1dbedff9327f"}, "a9b6d699-f427-4b06-98f9-46ec99d4a94b": {"doc_hash": "44460f2104fa4b1802e8f93778934299994080ddcde5fd57d95a75c0e82b2946", "ref_doc_id": "c6807474-641e-4196-bb0b-1dbedff9327f"}, "2ee0afd8-8c71-47a2-a5ad-f3fed96e25f1": {"doc_hash": "c97edd4a0af125a6375ccf11e3e35705ceadaa7c3dc9a806a11483da2ba6a13e", "ref_doc_id": "e5bd3a03-8e5d-433c-b202-6b9dc83867cb"}, "bbe846b9-04c6-443a-9dbe-e3610a43098a": {"doc_hash": "dba0ca5b8e9bf7556c3cece68a576723c7207bc73617c5206804e7c73d39911f", "ref_doc_id": "0c911227-57fa-4b8e-ba51-16ba67a514c2"}, "ca4c042f-6b3e-41e8-a342-763152bca325": {"doc_hash": "e779dcadb4f5894dc9b2ff874969c6a6a868ab85bd06369f9379515b7d3bdec8", "ref_doc_id": "30fa5668-f78e-45dd-97af-3bb10be09c12"}, "e89d6d60-6436-487f-9798-e963373c4a8f": {"doc_hash": "50ac72a5f4c9d8f8759a419b5c9e07439846ccbcb05b87bc978f3b73510708e0", "ref_doc_id": "f99f82ef-ae58-48c4-b894-33664dc5e720"}, "90844d31-4b7e-4bf9-af6e-4a30471700cf": {"doc_hash": "157decec1e8ddd672eda53c1f8315114b49cb0417cdcea04db757bd9629b945c", "ref_doc_id": "aee45c45-154f-457e-960d-224f970c0dbf"}, "9d4660bf-df4c-4d79-92ec-3f5be126895d": {"doc_hash": "975c41dcd6e2d5f495c735a433031b6da04f3492afb8827b098653fd5c80ffea", "ref_doc_id": "f1ee026f-34f1-409a-9670-a18467d09a27"}, "3ac5f7e9-b7f1-40ca-91a4-1a29d0162a8f": {"doc_hash": "9162d9fcc79e6d8fa72026861d0b69d15d1550e22f06e710dd441ea22230d8ab", "ref_doc_id": "1a7d4449-d5ee-45d0-883d-9b210a387c36"}, "a026187e-926c-478e-a8f4-af43d74cddab": {"doc_hash": "d626c61b93a5324c190fd14e6ac05d1b362498ba3149dc9568fe56cc9c5ab8c9", "ref_doc_id": "1a7d4449-d5ee-45d0-883d-9b210a387c36"}, "6d8318e4-59b5-4e82-9486-a3c925914cbf": {"doc_hash": "ce29ecfa913e0946867ef2bea23af7468e7b6d3bc57d96abeba50c4feef55291", "ref_doc_id": "abcba890-1cef-481e-9759-ab57d50aca14"}, "9eea7ae4-862f-48eb-b24b-3203c98f7e8b": {"doc_hash": "1542f7dc29cbd82fc842f72d72a9d242d2495664548fa64b6a97fd10db980440", "ref_doc_id": "324cead7-05de-4daf-9ede-5067534a5fda"}, "618116f8-9629-453e-b9d5-b446a11909d3": {"doc_hash": "c8db8bf023e72c6c2956b5dbaf846bc0435e75d0c3adb11781f709460b65b8c0", "ref_doc_id": "324cead7-05de-4daf-9ede-5067534a5fda"}, "5cb4e034-3706-45a3-a9e3-d1f0fcfbb8a9": {"doc_hash": "dc533c476c523d7824d99480e014e5d15d3ac0f036f6bc7da5d414298672b03f", "ref_doc_id": "4a3369f8-4bf6-4381-a948-38364e8d8704"}, "70ca0297-aac0-48f8-931c-a6e8c54bb1a2": {"doc_hash": "4b6614ba4d15c19e93d7124b061ffd7aff99f4161d887e97527ae7fed956176b", "ref_doc_id": "b50c50dd-b71f-4ed8-a606-f386a37778c5"}, "7a130a70-c6a0-4bb4-9623-8162bcf6bca6": {"doc_hash": "c17e1bbfbb89fbfcab2b39d00e00c598c78591bbec816d08b344b64a57890693", "ref_doc_id": "c7fa74bd-c3ca-419b-8cfe-eac07d9741e1"}, "fd2ec0b3-f277-406d-8591-2e2b73bf0344": {"doc_hash": "fd7c592257449e69a42b319658a458f55adce9d885eec3ea30e759b251947dac", "ref_doc_id": "a44f7418-5434-447b-9171-63ea3199f936"}, "a86897b4-887a-4667-8b06-0a56093135c2": {"doc_hash": "95355d7c31a7aa79d43385de4cceb77d9982d1d6bd5445f699a4752411d8360f", "ref_doc_id": "f01b4871-1835-4944-a695-b1e57ed3484a"}, "1090be1b-5a94-4e87-8531-33add6ee482a": {"doc_hash": "32b89a161c1e028f0cc314a4a1dcbb63661a3cd193958ab5d886c0c8e66e58ac", "ref_doc_id": "590fe819-90f6-449f-b71c-d2e0ca8e6d78"}, "76344d78-ec43-4e55-aadb-6de497a5c056": {"doc_hash": "370432f8138e78b8367f50d47242f16d885abf9f1f844fd81d572e501be54d6d", "ref_doc_id": "590fe819-90f6-449f-b71c-d2e0ca8e6d78"}, "e524f6e7-9c59-42b4-9006-0e77378ff996": {"doc_hash": "0d578dcf08b595e09eb0df45aff7192c86b18f402b3954e5ae6504db8061aabc", "ref_doc_id": "1b5d2055-b0bb-4f64-b0e6-c434be595952"}, "1b7fb809-a873-405f-9988-1c9f9b0243db": {"doc_hash": "327aea4e5698493b96576f719561d313712b1ccaf29272de73b10ba064e8ea9e", "ref_doc_id": "1b5d2055-b0bb-4f64-b0e6-c434be595952"}, "a0ba49a6-f874-43b1-82c5-a50b0e30bd3e": {"doc_hash": "e6690d3f0ec19ec53f2ce9b7716e42809902f1f47ce6c528d056171cdf4d9c6b", "ref_doc_id": "4573aa17-c9b8-4546-a654-7a40acaee3ca"}, "2456fc04-9ee7-4506-80f0-2ee5273c1be7": {"doc_hash": "73a8cc8174417c6e1ec148de3901cce14141117f524b9217093ddc55a76f4d14", "ref_doc_id": "4573aa17-c9b8-4546-a654-7a40acaee3ca"}, "2cbff36b-5fab-4232-8e21-16d0ef88dd8e": {"doc_hash": "ab3fdb3c5483b18dc26d350f710d02762604f501abf6cf43e699a1ca1770b5c2", "ref_doc_id": "9185357c-0845-42b0-83a8-1b997675acfe"}}, "docstore/data": {"ccb91132-a660-46cf-9e1a-8720ccbf1e75": {"__data__": {"id_": "ccb91132-a660-46cf-9e1a-8720ccbf1e75", "embedding": null, "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ec3604b-9a31-4557-8bc8-a72b61eabd67", "node_type": "4", "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "3808dfaeb49867d0268bc0e82147981064738371c418f25e2f0db1cf80d82df9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "055f7911-f10d-414c-9b99-6c86b0bf5c76", "node_type": "1", "metadata": {}, "hash": "c6282bdee50466778319174295267663b90da2a291e49903bd268aaa15d73c86", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\n\u0110\u1ed7Nh\u01b0T\u00e0i\nKhoa C\u00f4ng ngh\u1ec7Th\u00f4ng tin\nTr\u01b0\u1eddng \u0110\u1ea1ih \u1ecdcN g o\u1ea1in g\u1eef-T i n  h\u1ecdc TP .HCM\nINTRODUCTION TO \nCUDA PROGRAMING\nINTRODUCTION TO CUDA PROGRAMING\n1 12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nN\u1ed8I DUNG TR\u00ccNH B\u00c0Y \n\u2022 Gi\u1edbi thi\u1ec7u t\u00ednh to\u00e1n song song\n\u2022 L\u1eadp tr\u00ecnh song song tr\u00ean GPUs\n\u2022 CUDA\n\u2022 M\u00f4 h\u00ecnh l\u1eadp tr\u00ecnh CUDA\n\u2022 M\u00f4 h\u00ecnh b\u1ed9 nh\u1edb CUDA\n\u2022 L\u1eadp tr\u00ecnh C/C++ v\u1edbi CUDA\n\u2022 V\u00ed d\u1ee5 minh h\u1ecda\n2 12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nT\u00cdNH TO\u00c1N SONG \nSONG\n L\u00c0 G\u00cc?\n\u2022 Ch\u1ea1y tr\u00ean nhi\u1ec1um \u00e1 yh o\u1eb7cs \u1eedd\u1ee5ng nhi\u1ec1ub \u1ed9vi x\u1eedl\u00fd ch\u1ea1y\nsong song\n\u2022 C\u00e1c ki\u1ebfn tr\u00fac cho t\u00ednh to\u00e1n song song hi\u1ec7nn a y :\nT\u00ednh to\u00e1n tr\u00ean nhi\u1ec1u\nvi x\u1eedl\u00fd (Cores) Cluster Graphics Cards\n(GPUs)\n3\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nC\u00c1C LO\u1ea0I T\u00cdNH TO\u00c1N SONG \nSONG\n (1)\n\u2022 M\u1ee9c \u0111\u1ed9bit\n\u2022 D\u1ef1at r \u00ea nv i\u1ec7ct \u0103ng s\u1ed1l\u01b0\u1ee3ng bit d\u1eefli\u1ec7ux \u1eedl\u00fd\n\u2022 C\u00e1c lo\u1ea1ib \u1ed9vi x\u1eedl\u00fd 8 bits, 16 bits, 32 bits, 64 bits\n\u2022 M\u1ee9c \u0111\u1ed9l\u1ec7nh\n\u2022 Kh\u1ea3n\u0103ng x\u1eedl\u00fd c\u00e1c l\u1ec7nh tr\u00f9ng l\u1eb7p, ph\u1ee5thu\u1ed9c v\u00e0o processor \npipeline\n4\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nC\u00c1C LO\u1ea0I T\u00cdNH TO\u00c1N SONG \nSONG\n (2)\n\u2022 M\u1ee9c \u0111\u1ed9d\u1eefli\u1ec7u\n\u2022 M\u1ed7iv i  x\u1eedl\u00fd th\u1ef1ch i\u1ec7n t\u00e1c v\u1ee5gi\u1ed1ng nhau t\u1ea1ic \u00e1 cp h\u1ea7nk h \u00e1 cn h a u\nc\u1ee7ad \u1eefli\u1ec7u (SIMD - Single Instruction Multiple Data)\n\u2022 M\u1ee9c \u0111\u1ed9nhi\u1ec7mv \u1ee5\n\u2022 C\u00e1c vi x\u1eedl\u00fd kh\u00e1c nhau ch\u1ea1y c\u00e1c l\u1ec7nh kh\u00e1c nhau \u1edf c\u00e1c ph\u1ea7nk h \u00e1 c\nnhau c\u1ee7ad \u1eefli\u1ec7u (MIMD - Multiple Instruction Multiple Data)\nSo s\u00e1nh gi\u1eefa SIMD v\u00e0 MIMD\n5\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1825, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "055f7911-f10d-414c-9b99-6c86b0bf5c76": {"__data__": {"id_": "055f7911-f10d-414c-9b99-6c86b0bf5c76", "embedding": null, "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ec3604b-9a31-4557-8bc8-a72b61eabd67", "node_type": "4", "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "3808dfaeb49867d0268bc0e82147981064738371c418f25e2f0db1cf80d82df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccb91132-a660-46cf-9e1a-8720ccbf1e75", "node_type": "1", "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "8933414578b6993d557d305e5b89aa818605d70ec4190d8dfe04ab1a6c835808", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 / 2014\nC\u00c1C LO\u1ea0I NG\u00d4N NG\u1eee L\u1eacP TR\u00ccNH SONG SONG\nOpenMP\n(Shared Memory)\nOpenMPI\n(Distributed Memory)\nCUDA (Compute Unified \nDevice Architecture) on GPUs\nOpenCL (Open Computing \nLanguage) on GPUs, CPUsKi\u1ebfn tr\u00fac h\u1ed7n h\u1ee3p\n+ M\u00e1y t\u00ednh (nhi\u1ec1u nh\u00e2n) v\u00e0 m\u1ed9t GPU (ho\u1eb7c \nnhi\u1ec1u GPUs) \n+ Nhi\u1ec1u c\u1ee5m m\u00e1y t\u00ednh nhi\u1ec1u nh\u00e2n k\u1ebft h\u1ee3p v\u00e0 \ntr\u00ean n\u00f3 c\u00f3 m\u1ed9t GPU (ho\u1eb7c nhi\u1ec1u GPUs)\nKi\u1ebfn tr\u00fac h\u1ee1n h\u1ee3p d\u1eabn \u0111\u1ebfn \npha tr\u1ed9n nhi\u1ec1u ng\u00f4n ng\u1eef:\n+ CUDA (OpenMP , OpenMPI)\n+ OpenCL (OpenMP , \nOpenMPI)\n+ PGI Fortan+ OpenACC\n6\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nGPUs\n\u2022 Bo m\u1ea1ch \u0111\u1ed3 h\u1ecda\n\u2022 C\u00e1c vi x\u1eed l\u00fd m\u1ec1m d\u1ebbo, m\u1ea1nh m\u1ebd trong t\u00ednh to\u00e1n song song\n\u2022 Gi\u1ea3i quy\u1ebft c\u00e1c v \u1ea5n \u0111\u1ec1 trong nhi\u1ec1ul \u0129nh v\u1ef1c kh\u00e1c nhau: t\u00e0i\nch\u00ednh, \u0111\u1ed3 h\u1ecda, x \u1eed l\u00fd \u1ea3nh v\u00e0 video, to\u00e1n h \u1ecdc, v \u1eadtl \u00fd ,s i n h\nh\u1ecdc, \u2026\nPh\u01b0\u01a1ng tr\u00ecnh vi ph\u00e2n Y h \u1ecdc Ph\u00e1t hi \u1ec7n \u0111\u1ed1i t\u01b0\u1ee3ng\nSinh h\u1ecdc ph\u00e2n t\u1eed\n7\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nGPUs (1)\n8\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nCPU vs. GPU\n\u2022 Ki\u1ebfn tr\u00fac GPU vs CPU \n9", "mimetype": "text/plain", "start_char_idx": 1826, "end_char_idx": 2995, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3ca4a663-9aa4-479c-91c5-84cb7201c78d": {"__data__": {"id_": "3ca4a663-9aa4-479c-91c5-84cb7201c78d", "embedding": null, "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5442007a-ea21-466d-a600-3410ddb6e43a", "node_type": "4", "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "fa978866c89a61d72559f5070b616d81b27dc5697d6620006a2c5f3d32519040", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be30aa92-06a0-4d78-90be-6a86e202a92a", "node_type": "1", "metadata": {}, "hash": "146146e106453ea1ba12bc2a0f4f8e9a64da39baa58f98987bf715f4c34aa207", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nCPU vs. \nGPU\nXeon E5-2687W Kepler GTX 680\nCores 8 (superscalar) 1536 (simple)\nActive threads 2 per core ~11 per core\nFrequency 3.1 GHz 1.0 GHz\nPeak performance (SP) 397 GFlop/s 3090 GFlop/s\nPeak mem. bandwidth 51 GB/s 192 GB/s\nMaximum power 150 W 195 W (to\u00e0n b\u1ed9card)\nPrice $1900 $500 (to\u00e0n b\u1ed9card)\nRelease dates 03/2012 03/2012\n10\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\n\u01afU \u0110I\u1ec2M GPU\n\u2022 T\u1ed1c \u0111\u1ed9\n\u2022 H\u01a1n8  l\u1ea7nv \u1ec1s\u1ed1ph\u00e9p to\u00e1n tr\u00ean gi\u00e2y\n\u2022 Nhi\u1ec1ub \u0103ng th\u00f4ng b\u1ed9nh\u1edbch\u00ednh\n\u2022 H\u01a1n4  l\u1ea7nv \u1ec1t\u1ed1c \u0111\u1ed9truy\u1ec1nb \u1ed9nh\u1edb\n\u2022 Hi\u1ec7uq u\u1ea3v\u1ec1chi ph\u00ed, n\u0103ng l\u01b0\u1ee3ng v\u00e0 k\u00edch th\u01b0\u1edbc\n\u2022 H\u01a1n 29 l\u1ea7nv \u1ec1chi ph\u00ed\n\u2022 H\u01a1n6  l\u1ea7nv \u1ec1s\u1ed1watt ti\u00eau th\u1ee5\n\u2022 H\u01a1n 11 l\u1ea7nv \u1ec1di\u1ec7nt \u00ed c h\n11\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nNH\u01af\u1ee2C \u0110I\u1ec2M GPU\n\u2022 T\u1ea1i sao m\u00e1y t\u00ednh kh\u00f4ng s\u1eedd\u1ee5ng GPU trong to\u00e0n b\u1ed9c\u00f4ng\nvi\u1ec7c?\n\u2022 GPUs ch\u1ec9c\u00f3 th\u1ec3th\u1ef1ch i\u1ec7nt r o n gm\u1ed9ts \u1ed1m\u00e3 ch\u01b0\u01a1ng tr\u00ecnh\nc\u1ea7nt \u0103ng t\u1ed1ct h\u1ef1ch i\u1ec7n\n\u2022 C\u1ea7nc \u01a1ch\u1ebfsong song, s\u1eedd\u1ee5ng l\u1ea1id \u1eefli\u1ec7uv \u00e0c \u00f3t \u00ed n h\u0111\u1ec1u \u0111\u1eb7n\n\u2022 GPUs kh\u00f3 l\u1eadpt r \u00ec n hv \u00e0\u0111i\u1ec1uc h\u1ec9nh h\u01a1ns o  v\u1edbiC P U\n\u2022 C\u00e1c c\u00f4ng c\u1ee5l\u1eadp tr\u00ecnh thi\u1ebfu\n\u2022 C\u01a1ch\u1ebfki\u1ebfnt r \u00fa c\n\u2022 Thi\u1ebfuh \u1ed7tr\u1ee3v\u1ec1c\u00e1c m\u00e3 ngu\u1ed3n \u0111\u1eb7ct r\u01b0ng\n12\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nCUDA\n\u2022 M\u1ed9t c\u00f4ng ngh\u1ec7 cho ph\u00e9p th\u1ef1c thi m\u00e3 tr\u00ean GPU cho \nx\u1eed l\u00fd song song \n\u2022 S\u1eed d\u1ee5ng chipset NVIDIA trong n\u0103m 2006 \n\u2022 \u0110\u1ec3 s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac n\u00e0y l\u00e0 c\u1ea7n thi\u1ebft \u0111\u1ec3 c\u00f3 m\u1ed9t GeForce 8 \nseries (ho\u1eb7c t\u01b0\u01a1ng \u0111\u01b0\u01a1ng Quadro)\n\u2022 C\u00e1c ph\u1ea7n m\u1ec1m h\u1ed7 tr\u1ee3 CUDA\n 13\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nT\u00cdNH N\u0102NG CUDA\n\u2022 H\u1ed7 tr\u1ee3 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C, C++,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be30aa92-06a0-4d78-90be-6a86e202a92a": {"__data__": {"id_": "be30aa92-06a0-4d78-90be-6a86e202a92a", "embedding": null, "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5442007a-ea21-466d-a600-3410ddb6e43a", "node_type": "4", "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "fa978866c89a61d72559f5070b616d81b27dc5697d6620006a2c5f3d32519040", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ca4a663-9aa4-479c-91c5-84cb7201c78d", "node_type": "1", "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "d72ac610d233b9e940d8e8b673d1793ec263093576c7b7d61e16d71b3fc62b04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 / 2014\nT\u00cdNH N\u0102NG CUDA\n\u2022 H\u1ed7 tr\u1ee3 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C, C++, Fortan, Matlab, Python, \nLabView\u2026\n\u2022 H\u1ed7 tr\u1ee3 qu\u1ea3n l\u00fd thread v\u00e0 d\u1eef li\u1ec7u song song\n\u2022 C\u00e1c th\u01b0 vi\u1ec7n:\n\u2022 FFT (Fast Fourier Transform)\n\u2022 BLAS (Basic linear algebra subrountines)\n\u2022 CURAND (Generate random numbers)\n\u2022 CUSPARSE (Linear algebra subrountines to operate sparse \nmatrices)\n\u2022 NPP (NVIDIA performance primitives)\n\u2022 H\u1ed7 tr\u1ee3 c\u00e1c th\u01b0 vi\u1ec7n: OpenGL, DirectX\n\u2022 H\u1ed7 tr\u1ee3 nhi\u1ec1u h\u1ec7 \u0111i\u1ec1u h\u00e0nh:\n\u2022 Windows, Linux, MacOS, \u2026\n14\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH L\u1eacP TR\u00ccNH CUDA (1)\n\u2022 M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh ch\u1ea1y tr\u00ean card \u0111\u1ed3 \nh\u1ecda g\u1ecdi l\u00e0 kernel\n\u2022 M\u1ed9t kernel t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t grid\nc\u00f3 c\u00e1c blocks v\u1edbi c\u00e1c thread ch\u1ea1y \nsong song c\u00f9ng x\u1eed l\u00fd t\u1eadp l\u1ec7nh\n\u2022 M\u1ed9t block bao g\u1ed3m nhi\u1ec1u thread \nt\u01b0\u01a1ng t\u00e1c nhau:\n\u2022 D\u1ec5 d\u00e0ng x\u1eed l\u00fd Shared Memory\n\u2022 \u0110\u1ed3ng b\u1ed9 gi\u1eefa c\u00e1c thread\n\u2022 M\u1ed7i thread c\u00f3 m\u1ed9t \u0111\u1ecbnh danh\n\u2022 T\u1ed5 ch\u1ee9c th\u00e0nh m\u1ea3ng 1, 2, hay 3 chi\u1ec1u\n\u2022 M\u1ed9t Grid ch\u1ee9a nhi\u1ec1u blocks:\n\u2022 C\u00f3 s\u1ed1 l\u01b0\u1ee3ng thread gi\u1edbi h\u1ea1n trong m\u1ed7i \nblock\n\u2022 M\u1ed7i block c\u00f3 m\u1ed9t \u0111\u1ecbnh danh\n\u2022 T\u1ed5 ch\u1ee9c th\u00e0nh d\u1ea1ng m\u1ea3ng:\n\u2022 1 hay 2 chi\u1ec1u (capacity <2.0)\n\u2022 1, 2 hay 3 chi\u1ec1u (capacity >=2.0)\n15\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH L\u1eacP TR\u00ccNH \nCUDA (2)\n\u2022 Ch\u1ea1y tr\u00ean Host v\u00e0 \nDevice\n\u2022 Host: CPU\n\u2022 Device: GPU\n\u2022 Kernel: t\u1eadp h\u1ee3p c\u00e1c \nl\u1ec7nh ch\u1ea1y tr\u00ean \nDevice\n 16\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nTHREAD PH\u00c2N K\u1ef2\n\u2022 M\u00e3 kh\u00f4ng ph\u00e2n k\u1ef3\nif (threadID >= 32) {\nsome_code;\n} else {\nother_code;\n}\n\u2022 M\u00e3 ph\u00e2n k\u1ef3\nif (threadID >= 13) {\nsome_code;\n} else {\nother_code;\n}\nThread ID:\n0 1 2 3 \u2026          31   \nThread ID:\n0 1 2 3 \u2026          31   \ndisabled\ndisabled\n17\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH B\u1ed8 NH\u1eda CUDA (1)\n18", "mimetype": "text/plain", "start_char_idx": 1761, "end_char_idx": 3680, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1ee4ff4-31d7-4119-9062-a6999afe2652": {"__data__": {"id_": "c1ee4ff4-31d7-4119-9062-a6999afe2652", "embedding": null, "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "288e88b1-1570-45d6-bcce-1e58145e2728", "node_type": "4", "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "f85a7095c963d00afc3d482ab08caca5677108c1c4a160d3698aaeff145bed15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3690a421-73f2-4c3e-8797-48cc02938368", "node_type": "1", "metadata": {}, "hash": "34cfef8c83172ff15d339efe709e306db8417fe5c799bbc33a9df2a83c57b51b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH B\u1ed8 NH\u1eda CUDA \n(2)\n\u2022 CUDA cung c\u1ea5p m\u1ed9t \u0111\u1ecba ch\u1ec9 b\u1ed9 nh\u1edb \u0111\u1ecdc v\u00e0 ghi ch\u1ee9a trong \nDRAM (b\u1ed9 nh\u1edb Device)\n19\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH B\u1ed8 NH\u1eda CUDA \n(3)\n\u2022 CUDA cung c\u1ea5p Shared Memory gi\u00fap cho vi\u1ec7c \u0111\u1ecdc v\u00e0 ghi \nnhanh h\u01a1n\n\u2022 Cho ph\u00e9p nhi\u1ec1u thread chia s\u1ebd d\u1eef li\u1ec7u v\u1edbi nhau\n\u2022 T\u1ed1i thi\u1ec3u vi\u1ec7c truy xu\u1ea5t DRAM\n20\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nM\u00d4 H\u00ccNH B\u1ed8 NH\u1eda CUDA \n(4)\n21\nGPU\nGlobal + Local Memory (DRAM)\nBlock (0, 0)\nShared Memory (SRAM)\nThread (0, \n0)\nRegister\ns\nThread (1, \n0)\nRegister\ns\nBlock (1, 0)\nShared Memory (SRAM)\nThread (0, \n0)\nRegister\ns\nThread (1, \n0)\nRegister\ns\nC\nPU\nConstant Memory (DRAM, cached)\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nC\u00c1C L\u1ec6NH QU\u1ea2N L\u00dd B\u1ed8 NH\u1eda\n\u2022 T\u1ea1o b\u1ed9 nh\u1edb\n\u2022 cudaMalloc ((void**) devPtr, size_t size)\n\u2022 cudaMallocHost ((void**) hostPtr, size_t size) \n\u2022 cudaFree (void *devPtr) \n\u2022 cudaFreeHost (void *hostPtr)\n\u2022 Sao ch\u00e9p b\u1ed9 nh\u1edb\n\u2022 cudaMemcpy(void  *dst, const void  *src, size_t count, enum \ncudaMemcpyKind kind)\n\u2022 cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t \nspitch, size_t width, size_t height, enum cudaMemcpyKind kind)\n\u2022 cudaMemcpyToSymbol(const char  *symbol, const void *src, \nsize_t count, size_t offset, enum cudaMemcpyKind kind) H\u00c6D, \nD\u00c6D\n\u2022 cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t \ncount, size_t offset, enum cudaMemcpyKind kind) D\u00c6H D\u00c6D\nKind = cudaMemcpyHostToHost,  cudaMemcpyHostToDevice, \ncudaMemcpyDeviceToHost,  or cudaMemcpyDeviceToDevice.\n22\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nQUALIFIERS C\u1ee6A H\u00c0M\n\u2022 __device__ \n\u2022 Ch\u1ea1y tr\u00ean Device,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1973, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3690a421-73f2-4c3e-8797-48cc02938368": {"__data__": {"id_": "3690a421-73f2-4c3e-8797-48cc02938368", "embedding": null, "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "288e88b1-1570-45d6-bcce-1e58145e2728", "node_type": "4", "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "f85a7095c963d00afc3d482ab08caca5677108c1c4a160d3698aaeff145bed15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1ee4ff4-31d7-4119-9062-a6999afe2652", "node_type": "1", "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "bd7b61c4b0ee89226c27b4ab65e9866440ca5d7520a3a15ae5767b23f75b349d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33636abc-bb42-449e-9dca-85640ddfb282", "node_type": "1", "metadata": {}, "hash": "f9ad7fcf7d998e7f47708258efc3e41c77da1a02ee5d596a8e11f809373e432a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "22\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nQUALIFIERS C\u1ee6A H\u00c0M\n\u2022 __device__ \n\u2022 Ch\u1ea1y tr\u00ean Device, \n\u2022 Ch\u1ec9 g\u1ecdi t\u1eeb Device\n\u2022 __global__\n\u2022 Ch\u1ea1y tr\u00ean Device\n\u2022 Ch\u1ec9 g\u1ecdi t\u1eeb Host\n\u2022 __host__\n\u2022 Ch\u1ea1y tr\u00ean Host\n\u2022 Ch\u1ec9 g\u1ecdi t\u1eeb Host\n23\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nQUALIFIERS C\u1ee6A BI\u1ebeN\n\u2022 __device__\n\u2022 N\u1eb1m trong Global Memory\n\u2022 T\u1ed3n t\u1ea1i su\u1ed1t ch\u01b0\u01a1ng tr\u00ecnh \u1ee9ng d\u1ee5ng\n\u2022 X\u1eed l\u00fd t\u1eeb t\u1ea5t c\u1ea3 thread c\u00f9ng grid v\u00e0 host\n\u2022 __constant__ (c\u00f3 th\u1ec3 \u0111i c\u00f9ng v\u1edbi __device__)\n\u2022 N\u1eb1m trong Constant Memory\n\u2022 T\u1ed3n t\u1ea1i su\u1ed1t ch\u01b0\u01a1ng tr\u00ecnh \u1ee9ng d\u1ee5ng\n\u2022 X\u1eed l\u00fd t\u1eeb t\u1ea5t c\u1ea3 thread c\u00f9ng grid v\u00e0 host\n\u2022 __shared__ (c\u00f3 th\u1ec3 \u0111i c\u00f9ng v\u1edbi __device__)\n\u2022 N\u1eb1m trong Shared Memory c\u1ee7a thread block\n\u2022 T\u1ed3n t\u1ea1i su\u1ed1t thread block\n\u2022 X\u1eed l\u00fd t\u1eeb trong thread c\u00f9ng block\n24\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nH\u00c0M KERNEL\n\u2022 G\u1ecdi h\u00e0m Kernel\n\u2022 Khai b\u00e1o h\u00e0m\n\u2022 __global__ void NameFunc(tham s\u1ed1);\n\u2022 L\u1eddi g\u1ecdi h\u00e0m\n\u2022 NameFunc <<< Dg, Db, Ns, St >>> (tham s\u1ed1);\n\u2022 Dg: ki\u1ec3u dim3, qui \u0111\u1ecbnh k\u00edch th\u01b0\u1edbc grid\n\u2022 Db: ki\u1ec3u dim3, qui \u0111\u1ecbnh k\u00edch th\u01b0\u1edbc block\n\u2022 Ns: s\u1ed1 bytes trong Shared Memory\n\u2022 St: ki\u1ec3u cudaStream_t x\u00e1c \u0111\u1ecbnh stream s\u1eed d\u1ee5ng h\u00e0m kernel\n\u2022 C\u00e1c bi\u1ebfn \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc: c\u00e1c h\u00e0m __global__ v\u00e0 \n__device__ c\u00f3 s\u1eb5n c\u00e1c bi\u1ebfn sau:\n\u2022 gridDim: lo\u1ea1i dim3, x\u00e1c \u0111\u1ecbnh k\u00edch th\u01b0\u1edbc grid\n\u2022 blockIdx: lo\u1ea1i uint3, x\u00e1c \u0111\u1ecbnh ch\u1ec9 s\u1ed1 block trong grid\n\u2022 blockDim: lo\u1ea1i dim3, x\u00e1c \u0111\u1ecbnh k\u00edch th\u01b0\u1edbc block\n\u2022 threadIdx: lo\u1ea1i uint3, x\u00e1c \u0111\u1ecbnh ch\u1ec9 s\u1ed1 thread trong block\n25\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nC\u00c1C KI\u1ec2U D\u1eee LI\u1ec6U\n\u2022 char1,  uchar1,  char2,  uchar2,  char3,  char3,  char4, \nuchar4,  short1,  ushort1,  short2,  ushort2,  short3, ushort3,  short4,  ushort4,  int1,  uint1,  int2,  uint2,  int3, \nuint3,  int4,  int4,  long1,  ulong1,  long2,  ulong2,  long3, \nulong3,  long4,  ulong4,  longlong1,  longlong2,  float1, \nfloat2, float3, float4, double1,", "mimetype": "text/plain", "start_char_idx": 1799, "end_char_idx": 3870, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33636abc-bb42-449e-9dca-85640ddfb282": {"__data__": {"id_": "33636abc-bb42-449e-9dca-85640ddfb282", "embedding": null, "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "288e88b1-1570-45d6-bcce-1e58145e2728", "node_type": "4", "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "f85a7095c963d00afc3d482ab08caca5677108c1c4a160d3698aaeff145bed15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3690a421-73f2-4c3e-8797-48cc02938368", "node_type": "1", "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "5a6abc352324d0733795c606ba9dbb620640e8458a8f1438afd1c735fea0de0d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 / 2014\nC\u00c1C KI\u1ec2U D\u1eee LI\u1ec6U\n\u2022 char1,  uchar1,  char2,  uchar2,  char3,  char3,  char4, \nuchar4,  short1,  ushort1,  short2,  ushort2,  short3, ushort3,  short4,  ushort4,  int1,  uint1,  int2,  uint2,  int3, \nuint3,  int4,  int4,  long1,  ulong1,  long2,  ulong2,  long3, \nulong3,  long4,  ulong4,  longlong1,  longlong2,  float1, \nfloat2, float3, float4, double1,double2\n\u2022 C\u00e1c th\u00e0nh ph\u1ea7n 1, 2, 3, 4 t\u01b0\u01a1ng \u1ee9ng v\u1edbi x, y, z, w\n\u2022 V\u00ed d\u1ee5:\nfloat3 temp[10];\n\u2026\u2026\u2026.\ntemp[i].x=0.0; temp[i].y=0.0; temp[i].z=0.0;\n26\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nC\u00c1C H\u00c0M TO\u00c1N H\u1eccC\n\u2022 __FuncName(): ch\u1ea1y \u1edf m\u1ee9c \u0111\u1ed9 ph\u1ea7n c\u1ee9ng, \u00edt ch\u00ednh x\u00e1c, \nbao g\u1ed3m: __sinf(x), __expf(x), __logf(x),\u2026\n\u2022 FuncName(): ch\u1eadm h\u01a1n nh\u01b0ng ch\u00ednh x\u00e1c, bao g\u1ed3m: \nsinf(x), expf(x), logf(x),\u2026\n\u2022 -use_fast_math: Nvcc compiler option\n27", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0b99868a-ce55-4301-a3a9-6acfbce7558e": {"__data__": {"id_": "0b99868a-ce55-4301-a3a9-6acfbce7558e", "embedding": null, "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6807474-641e-4196-bb0b-1dbedff9327f", "node_type": "4", "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "dfc2e621736efa51205a2a1ba41d5c6e137c60c71a20fefe4972064e64bf3819", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9b6d699-f427-4b06-98f9-46ec99d4a94b", "node_type": "1", "metadata": {}, "hash": "9cda1baafce3f6a4f727e284eda6d5468f73eba754d01d8a89a9c72e47fee47b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nKI\u1ec2M TRA TH\u00d4NG TIN GPUs\n\u2022 deviceQueryDrv\n\u2022 CUDA-Z\n28\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 1: Hello World\n29\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 2: T\u00ednh t\u1ed5ng 2 Vector\n\u2022 Vector sum (c = a + b)\n\u2022 Create vectors a, b, c on the host  and load data a, b\n\u2022 Create vectors a, b, c in the device\n\u2022 Copy the contents of the vectors a and b on host to device\n\u2022 Initialize the grid and block dimensions, and launch kernel to add \na and b on device\n\u2022 Copy the result on device to the host \n\u2022 Write result vector c on host\n\u2022 Free Device and Host Memory\n30\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 2: T\u00ednh t\u1ed5ng 2 Vector\n31\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 2: T\u00ednh t\u1ed5ng 2 Vector\n32\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 \n3: Nh\u00e2n 2 ma tr\u1eadn\n33\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 3: Nh\u00e2n 2 ma tr\u1eadn\n34\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 3: Nh\u00e2n 2\n ma tr\u1eadn\n\u2022 Create matrix a, b, c on the host  and load data a, b\n\u2022 Create matrix  a, b, c in the device\n\u2022 Copy the contents of the matrix a and b on host to device\n\u2022 Initialize the grid and block dimensions,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a9b6d699-f427-4b06-98f9-46ec99d4a94b": {"__data__": {"id_": "a9b6d699-f427-4b06-98f9-46ec99d4a94b", "embedding": null, "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6807474-641e-4196-bb0b-1dbedff9327f", "node_type": "4", "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "dfc2e621736efa51205a2a1ba41d5c6e137c60c71a20fefe4972064e64bf3819", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b99868a-ce55-4301-a3a9-6acfbce7558e", "node_type": "1", "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "939e2c6eb68879eba0ddc6ec7ba69000c17d6ccba82a237bd5c2729cc1bc29d3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 / 2014\nV\u00ed d\u1ee5 3: Nh\u00e2n 2 ma tr\u1eadn\n34\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nV\u00ed d\u1ee5 3: Nh\u00e2n 2\n ma tr\u1eadn\n\u2022 Create matrix a, b, c on the host  and load data a, b\n\u2022 Create matrix  a, b, c in the device\n\u2022 Copy the contents of the matrix a and b on host to device\n\u2022 Initialize the grid and block dimensions, and launch \nkernel to multiply a and b on device\n\u2022 Copy the result on device to the host \n\u2022 Write result matrix c on host\n\u2022 Free Device and Host Memory\n35\n12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nT\u00c0I LI\u1ec6U THAM KH\u1ea2O\n\u2022 Francisco Javier Hern\u00e1ndez L\u00f3pez, EJEMPLOS DE \nPROGRAMACI\u00d3N EN CUDA, http://www.cimat.mx/~fcoj23\n\u2022 Martin Burtscher, CUDA Optimization Tutorial, \nhttp://www.cs.txstate.edu/~burtscher/tutorials/COT5/slid\nes.pptx\n36", "mimetype": "text/plain", "start_char_idx": 1394, "end_char_idx": 2282, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ee0afd8-8c71-47a2-a5ad-f3fed96e25f1": {"__data__": {"id_": "2ee0afd8-8c71-47a2-a5ad-f3fed96e25f1", "embedding": null, "metadata": {"page_label": "37", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5bd3a03-8e5d-433c-b202-6b9dc83867cb", "node_type": "4", "metadata": {"page_label": "37", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "c97edd4a0af125a6375ccf11e3e35705ceadaa7c3dc9a806a11483da2ba6a13e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n34\n56\n78\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n\u00a9 \u0110\u1ed7 Nh\u01b0 T\u00e0i, 10 / 2014\nXIN CH\u00c2N TH\u00c0NH C\u00c1M \u01a0N \nQU\u00dd TH\u1ea6Y C\u00d4 \u0110\u00c3 L\u1eaeNG NGHE!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 167, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bbe846b9-04c6-443a-9dbe-e3610a43098a": {"__data__": {"id_": "bbe846b9-04c6-443a-9dbe-e3610a43098a", "embedding": null, "metadata": {"page_label": "38", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c911227-57fa-4b8e-ba51-16ba67a514c2", "node_type": "4", "metadata": {"page_label": "38", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "cd5d6c70556b560f2430d6a0138d3ae0012a524144f8fb76dee03bb5f87defc5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 1 / 34 \nLAB FOR INTRODUCTION TO CUDA \nLAB FOR INTRODUCTION TO CUDA ................................................................................................. 1 \nSETUP ENVIRONMENT WITH CUDA INTEGRATED IN VISUAL STUDIO 2010 ....................... 2 \nSetup your environment ............................................................................................................................................ 2 \nVerify the Installation ................................................................................................................................................. 4 \nCreate Cuda project from template ........................................................................................................................... 5 \nCreate Cuda project from Empty Project ................................................................................................................. 8 \nLAB 01: INITIAL LAB TOUR ................................................................................................................ 11 \nObjective .................................................................................................................................................................... 11 \nExercises ................................................................................................................................................................... 11 \nExercise 1. CudaInfo .............................................................................................................................................. 11 \nExercise 2. HelloWorld ........................................................................................................................................... 12 \nExercise 3. Utils ...................................................................................................................................................... 13 \nExercise 4. VectorAdd_11 ...................................................................................................................................... 15 \nLAB 02: VECTOR ADDITION ............................................................................................................... 18 \nObjective .................................................................................................................................................................... 18 \nExercise ..................................................................................................................................................................... 18 \nExercise 1. GenVectorAdd ..................................................................................................................................... 18 \nExercise 2. VectorAdd_NoCuda ............................................................................................................................. 20 \nExercise 3. VectorAdd ............................................................................................................................................ 22 \nLAB 03: BASIC MATRIX-MATRIX MULTIPLICATION ................................................................. 25 \nObjective .................................................................................................................................................................... 25 \nExercise ..................................................................................................................................................................... 25 \nExercise 1. GenMatrixDenseMul ............................................................................................................................ 26 \nExercise 2. MatrixDenseMul_NoCuda ................................................................................................................... 28 \nExercise 3. MatrixDenseMul ................................................................................................................................... 31 \n \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 2 / 34 \nSETUP ENVIRONMENT WITH CUDA INTEGRATED IN VISUAL \nSTUDIO 2010 \nEnsure you have Microsoft Visual Studio 2010 installed before you install the CUDA toolkit, if you have \nalready installed the CUDA toolkit and have not yet installed Visual Studio then un-install it before \ncontinuing (not doing so will result in Visual Studio integration not functioning) \nSetup your environment \nx Install Microsoft Visual Studio 2010 (optional) \nYou can download Microsoft Visual C++ 2010 Express for free from http://www.microsoft.com \n/visualstudio/en-us/products/2010-editions/visual-cpp-express. \nx Verify a CUDA-Capable GPU  \nFind the vendor name and model of your graphics card. If it is an NVIDIA card that is listed in \nhttp://www.nvidia.com/object/cuda_gpus.html, your GPU is CUDA-capable. \nx Install the latest Nvidia driver \nYou can download from http://www.nvidia.com/Download/index.aspx?lang=en-us \n \nx Install CUDA Toolkit and CUDA SDK \no Download the NVIDIA CUDA Toolkit  from http://www.nvidia.com/content/cuda/cuda-\ndownloads.html. The NVIDIA CUDA Toolkit contains the driver and tools needed to \ncreate, build and run a CUDA application as well as libraries, header files, CUDA samples \nsource code, and other resources. \n \nChoose the platform you are using and download the NVIDIA CUDA Toolkit. Example: \nNotebook \u2013 64bit", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca4c042f-6b3e-41e8-a342-763152bca325": {"__data__": {"id_": "ca4c042f-6b3e-41e8-a342-763152bca325", "embedding": null, "metadata": {"page_label": "39", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30fa5668-f78e-45dd-97af-3bb10be09c12", "node_type": "4", "metadata": {"page_label": "39", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "3beb6f13a1aebcabd03aff7a2010df4d129fc980cca5bb3e5da0da3a0de824ce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 3 / 34 \no Install the CUDA Toolkit by executing the Toolkit installer and following the on-screen \nprompts. \n  \n \n  \n \n   \no CUDA Toolkit: \n\u0083 The CUDA Toolkit installation defaults to C:\\Program Files\\NVIDIA GPU \nComputing Toolkit\\CUDA\\v#.#, where #.# is version number 3.2 or higher. \nBin\\    \u00c6 the compiler executables and runtime libraries \nInclude\\ \u00c6the header files needed to compile CUDA programs \nLib\\    \u00c6 the library files needed to link CUDA programs \nDoc\\    \u00c6the CUDA C Programming Guide, CUDA C Best Practices Guide, \ndocumentation for the CUDA libraries, and other CUDA Toolkit-related documentation \n\u0083 CUDA Samples \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 4 / 34 \nThe CUDA Samples contain source code for many example problems and templates with \nMicrosoft Visual Studio 2008 and 2010 projects. \nFor Windows Vista, Windows 7, and Windows Server 2008, the samples can be found \nhere: C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0 \nVerify the Installation \nBefore continuing, it is important to verify that the CUDA programs can find and communicate correctly \nwith the CUDA-capable hardware. To do this, you need to compile and run some of the included sample \nprograms. \nx Start Command Prompt:  \nStart > All Programs > Accessories > Command Prompt \nx Type cd command to move to directory \\bin\\win[64,32]\\release in Cuda Sapmles \nFor Windows Vista, Windows 7, Windows 8, Windows Server 2003, and Windows Server 2008 \n64 bits: \ncd C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0\\bin\\win64\\Release \n \nx Check version of  the CUDA Toolkit by running nvcc -V \n \nx Running the queryDevice program  ensures that CUDA-capable devices are present \n \nNo CUDA-capable devices \no If a CUDA-capable device and the CUDA Driver are installed but deviceQuery reports \nthat no CUDA-capable devices are present, ensure the deivce and driver are properly \ninstalled.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e89d6d60-6436-487f-9798-e963373c4a8f": {"__data__": {"id_": "e89d6d60-6436-487f-9798-e963373c4a8f", "embedding": null, "metadata": {"page_label": "40", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f99f82ef-ae58-48c4-b894-33664dc5e720", "node_type": "4", "metadata": {"page_label": "40", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "6acc7497b0caaf9e06c95d96ab4b51c234c5b7e6dc9b11de7ebd8e54d5a73d13", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 5 / 34 \n \nValid Results from Sample CUDA Device Query Program \n \nx Running the bandwidthTest program ensures that the system and the CUDA-capable device are \nable to communicate correctly. \n \nValid Results from Sample CUDA Bandwidth Test Program \n \nCreate Cuda project from template \nStep 1. Open Visual Studio 2010 \nStep 2. Menu File \u00c6 New \u00c6 Project \nx Choose NVIDIA \u00c6 CUDA \nx CUDA 5.0 Runtime Templates \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 6 / 34 \nx Fill other information: \no Name: Sum2Vectors \no Location: CudaProjects \no Solution name: Sum2Vectors \n \nStep 3. Replace content of kernel.cu with source code below: \n \nStep 4. To get syntax highlighting working for .cu files: \nx Tools \u00c6 Options \u00c6 Text editor \u00c6 File extension \nx Type .cu in input box \u00c6 Choose Microsoft Visual C++ \nx Click Add \u00c6 Press Ok \u00c6 Restart Visual Studio. \n \nStep 5. Press Ctrl + F5 to build and run the program. \nSource Code \n#include <iostream> \n#include <cuda_runtime.h> \n \n#define N 10", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1037, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90844d31-4b7e-4bf9-af6e-4a30471700cf": {"__data__": {"id_": "90844d31-4b7e-4bf9-af6e-4a30471700cf", "embedding": null, "metadata": {"page_label": "41", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aee45c45-154f-457e-960d-224f970c0dbf", "node_type": "4", "metadata": {"page_label": "41", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "3b0aef15188d1f2ab64c8178b6bc0c5abee4dff832c0b3890fd4b9dceed51e7d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 7 / 34 \n#define CUDA_ERROR 1 \n \n__global__ void add( int *a, int *b, int *c ) { \n int tid = blockIdx.x; \n \n if(tid < N) \n  c[tid] = a[tid] + b[tid]; \n} \n \nint main( void ) { \n int count; \n cudaDeviceProp prop; \n \n int a[N], b[N], c[N]; \n int *dev_a, *dev_b, *dev_c; \n \n if( cudaGetDeviceCount(&count) != cudaSuccess) \n  return CUDA_ERROR; \n \n for(int i = 0; i < count; i++) { \n  if(cudaGetDeviceProperties(&prop, i) != cudaSuccess) \n   return CUDA_ERROR; \n \n  printf(\"--- General Information for device %d ---\\n\", i); \n  printf(\"Name: %s\\n\", prop.name); \n  printf(\"Compute capability: %d.%d\\n\", prop.major, prop.minor); \n  printf(\"Max threads per block: %d\\n\", prop.maxThreadsPerBlock); \n  printf(\"Max thread dimensions: (%d, %d, %d)\\n\", \n   prop.maxThreadsDim[0], \n   prop.maxThreadsDim[1], \n   prop.maxThreadsDim[2]); \n  printf(\"Max grid dimensions; (%d, %d, %d)\\n\", \n   prop.maxGridSize[0], \n   prop.maxGridSize[1], \n   prop.maxGridSize[2]); \n } \n \n cudaMalloc((void**)&dev_a, N * sizeof(int)); \n cudaMalloc((void**)&dev_b, N * sizeof(int)); \n cudaMalloc((void**)&dev_c, N * sizeof(int)); \n \n printf(\"\\n\\n--- Adding 2 vectors on the GPU ---\\n\"); \n for(int i = 0; i < N; i++) { \n  a[i] = i * 2; \n  b[i] = i * i; \n } \n \n cudaMemcpy(dev_a, a, N * sizeof(int), cudaMemcpyHostToDevice); \n cudaMemcpy(dev_b, b, N * sizeof(int), cudaMemcpyHostToDevice); \n \n add<<<N, 1>>>(dev_a, dev_b, dev_c); \n \n cudaMemcpy( c, dev_c, N * sizeof(int), cudaMemcpyDeviceToHost ); \n \n for(int i = 0; i < N; i++) { \n  printf(\"%d + %d = %d\\n\", a[i], b[i], c[i]); \n } \n \n cudaFree( dev_a ); \n cudaFree( dev_b ); \n cudaFree( dev_c ); \n \n return 0; \n} \n \nOutput: \n--- General Information for device 0 --- \nName: GeForce GT 520MX \nCompute capability: 2.1\nMax threads per block: 1024 \nMax thread dimensions: (1024, 1024, 64) \nMax grid dimensions; (65535, 65535, 65535) \n \n--- Adding 2 vectors on the GPU --- \n0 + 0 = 0 \n2 + 1 = 3 \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 8 / 34 \n4 + 4 = 8 \n6 + 9 = 15 \n8 + 16 = 24 \n10 + 25 = 35 \n12 + 36 = 48 \n14 + 49 = 63 \n16 + 64 = 80 \n18 + 81 = 99 \n \nCreate Cuda project from Empty Project \nStep 1. Open Microsoft Visual Studio 2010\nStep 2. Create a New Empty project: \nx File \u00c6 New \u00c6 Project \nx Select Win32 Console Application.  \n \nStep 3. In Win32 Application Wizard, choose Console application and Empty project. After that, press \nFinish button:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2425, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d4660bf-df4c-4d79-92ec-3f5be126895d": {"__data__": {"id_": "9d4660bf-df4c-4d79-92ec-3f5be126895d", "embedding": null, "metadata": {"page_label": "42", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1ee026f-34f1-409a-9670-a18467d09a27", "node_type": "4", "metadata": {"page_label": "42", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "e8ecb2a3b2ac050405bbbec90e21e7e0ceef6d37e3795bc68119d554e610627a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 9 / 34 \nStep 4. Right Click on the Project at the Solution Explorer and Select Build Customizations\u2026 \nYou should now see a list of configuration files but none of them are for CUDA. So you must click on \nFind Existing button and add the CUDA target files located at C:\\Program Files \n(x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\BuildCustomizations. \nStep 5. Select one of the CUDA configuration files and click Ok. \n \nStep 6. To get syntax highlighting working for .cu files: \nx Tools \u00c6 Options \u00c6 Text editor \u00c6 File extension \nx Type .cu in input box \u00c6 Choose Microsoft Visual C++ \nx Click Add \u00c6 Press Ok \u00c6 Restart Visual Studio. \nStep 7. Add a new cpp source file and change it\u2019s extension to .cu. In case, its name is kernel.cu. \n   \nStep 8. Open the file\u2019s Properties (Alt + Enter) and change its Configuration Properties \u00c6 General \u00c6 \nItem type to CUDA C/C++. \n \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 10 / 34 \nStep 9. Now, go to the project\u2019s property page and add the following Additional Dependency cudart.lib to \nthe Linker\u2019s Input. (Configuration Properties \u00c6Linker \u00c6 Input \u00c6 Additional Dependency) \n \nStep 10. Still at the project\u2019s properties page change Configuration Properties \u00c6 General \u00c6 Platform \nToolset to Visual Studio 2010 (v100) \n \nStep 11. Type source code kernel.cu above, and press Ctrl + F5 to build and run programs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3ac5f7e9-b7f1-40ca-91a4-1a29d0162a8f": {"__data__": {"id_": "3ac5f7e9-b7f1-40ca-91a4-1a29d0162a8f", "embedding": null, "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a7d4449-d5ee-45d0-883d-9b210a387c36", "node_type": "4", "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "e8e8ec65343c2082872f0d1d4bcb2a19d8153065b45a556d1bd20eeb30e0b2ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a026187e-926c-478e-a8f4-af43d74cddab", "node_type": "1", "metadata": {}, "hash": "ba02c1120bfff34bace2abddb12f268118fc6e1ffe7ad238a5cb01a74b034259", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 11 / 34 \nLAB 01: INITIAL LAB TOUR \nObjective \nThe purpose of this lab is to get you familiar with basic cuda function, debug cuda program, outline cuda \ncode  and program benchmark. \nExercises \nExercise 1. CudaInfo \nWrite a program to show the hardware information used: \nx GPU card's name \nx GPU computation capabilities \nx Maximum number of block dimensions \nx Maximum number of grid dimensions \nx Maximum size of GPU memory \nx Amount of constant and share memory \nx Warp size \nExample Console Outputs: \nThere is 1 device supporting CUDA \nDevice 0 name: GeForce GT 520MX \n Computational Capabilities: 2.1 \n Maximum global memory size: 536870912 \n Maximum constant memory size: 65536 \n Maximum shared memory size per block: 49152 \n Maximum block dimensions: 1024 x 1024 x 64 \n Maximum grid dimensions: 65535 x 65535 x 65535 \n Warp size: 32\nPress any key to continue . . . \nEx1_CudaInfo.cpp \n#include<iostream> \n#include<cuda_runtime.h> \nusing namespace std; \nint main(int argc, char ** argv)  \n{ \n int deviceCount; \n cudaGetDeviceCount(&deviceCount); \n for (int dev = 0; dev < deviceCount; dev++)  \n{\n  cudaDeviceProp deviceProp; \n  cudaGetDeviceProperties(&deviceProp, dev); \n  if (dev == 0)  \n  { \n   if (deviceProp.major == 9999 && deviceProp.minor == 9999)  \n{\n    cout << \"No CUDA GPU has been detected\"  \n     << endl; \n    return -1; \n   }  \n   else if (deviceCount == 1)  \n   { \n    cout << \"There is 1 device supporting CUDA\"  \n     << endl; \n   }  \n   else  \n   { \n    cout << \"There are \" << deviceCount  \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 12 / 34 \n     < <  \" devices supporting CUDA\" << endl; \n   }  \n  } \n  cout << \"Device \" << dev << \" name: \"  \n   << deviceProp.name << endl; \n  cout << \" Computational Capabilities: \" \n   << deviceProp.major << \".\"   \n   << deviceProp.minor << endl; \n  cout << \" Maximum global memory size: \"  \n   << deviceProp.totalGlobalMem << endl; \n  cout << \" Maximum constant memory size: \"  \n   << deviceProp.totalConstMem << endl; \n  cout << \" Maximum shared memory size per block: \"  \n   << deviceProp.sharedMemPerBlock << endl; \n  cout << \" Maximum block dimensions: \"  \n   << deviceProp.maxThreadsDim[0] << \" x \"  \n   << deviceProp.maxThreadsDim[1] << \" x \" \n   << deviceProp.maxThreadsDim[2] << endl; \n  cout << \" Maximum grid dimensions: \"  \n   << deviceProp.maxGridSize[0] << \" x \" \n   << deviceProp.maxGridSize[1] << \" x \"  \n   << deviceProp.maxGridSize[2] << endl; \n  cout << \" Warp size: \" << deviceProp.warpSize << endl; \n } \n cudaDeviceReset();// called to reinitialized the device \n system(\"PAUSE\"); \n return 0; \n} \nExercise 2. HelloWorld \nWrite a program to launch a kernel with grid size 3 and block size 4. The kernel prints the message \n\u201cHello, I am a thread [thread id] of block [block id] with value e = [ e ] \\ n\u201d where a input parameter e, \ncurrent thread id and current block id.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2918, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a026187e-926c-478e-a8f4-af43d74cddab": {"__data__": {"id_": "a026187e-926c-478e-a8f4-af43d74cddab", "embedding": null, "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a7d4449-d5ee-45d0-883d-9b210a387c36", "node_type": "4", "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "e8e8ec65343c2082872f0d1d4bcb2a19d8153065b45a556d1bd20eeb30e0b2ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ac5f7e9-b7f1-40ca-91a4-1a29d0162a8f", "node_type": "1", "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "9162d9fcc79e6d8fa72026861d0b69d15d1550e22f06e710dd441ea22230d8ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "HelloWorld \nWrite a program to launch a kernel with grid size 3 and block size 4. The kernel prints the message \n\u201cHello, I am a thread [thread id] of block [block id] with value e = [ e ] \\ n\u201d where a input parameter e, \ncurrent thread id and current block id. \nExample Console Outputs: \nHello, I am a thread 0 of block 0 with value e=2.718280 \nHello, I am a thread 1 of block 0 with value e=2.718280 \nHello, I am a thread 2 of block 0 with value e=2.718280 \nHello, I am a thread 3 of block 0 with value e=2.718280 \nHello, I am a thread 0 of block 2 with value e=2.718280 \nHello, I am a thread 1 of block 2 with value e=2.718280 \nHello, I am a thread 2 of block 2 with value e=2.718280 \nHello, I am a thread 3 of block 2 with value e=2.718280 \nHello, I am a thread 0 of block 1 with value e=2.718280 \nHello, I am a thread 1 of block 1 with value e=2.718280 \nHello, I am a thread 2 of block 1 with value e=2.718280 \nHello, I am a thread 3 of block 1 with value e=2.718280 \nPress any key to continue . . . \nEx1_HelloWorld.cu \n#include<cstdio> \n#include<cstdlib> \n#include<cuda_runtime.h> \n \n__global__ void helloCuda(float e) \n{ \n printf(\"Hello, I am a thread %d of block %d with value e=%f\\n\", \n  threadIdx.x, blockIdx.x, e); \n} \n \nint main(int argc, char **argv)", "mimetype": "text/plain", "start_char_idx": 2658, "end_char_idx": 3920, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d8318e4-59b5-4e82-9486-a3c925914cbf": {"__data__": {"id_": "6d8318e4-59b5-4e82-9486-a3c925914cbf", "embedding": null, "metadata": {"page_label": "44", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abcba890-1cef-481e-9759-ab57d50aca14", "node_type": "4", "metadata": {"page_label": "44", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "a0e56b557b99b89df11f29b378380231753fccb59c694d561446f726aff91840", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 13 / 34 \n{ \n helloCuda<<<3,4>>>(2.71828f); \n \n cudaDeviceReset();// called to reinitialized the device \n system(\"PAUSE\"); \n return 0; \n}// main \n* printf() is only supported for devices of compute capability 2.0 and higher. So do not forget to put -\narch = compute_20 the nvcc compiler. \n \nExercise 3. Utils \nWrite library utility.h to: \nx Check cuda errors \nx Benchmark time for program \nutils.h \n#include <windows.h> \n#include <iostream> \n#include <iomanip> \n#include <cuda.h> \n#include <cuda_runtime.h> \n#include <cuda_runtime_api.h> \n \n#ifndef __UTILS_H__ \n#define __UTILS_H__ \n \n#define checkCudaErrors(val) check( (val), #val, __FILE__, __LINE__) \n \ntemplate<typename T> \nvoid check(T err, const char* const func, const char* const file, const int line) { \n if (err != cudaSuccess) { \n  std::cerr << \"CUDA error at: \" << file << \":\" << line << std::endl; \n  std::cerr << cudaGetErrorString(err) << \" \" << func << std::endl; \n  exit(1); \n } \n} \n \nstruct GpuTimer { \n cudaEvent_t start; \n cudaEvent_t stop; \n  \n GpuTimer() { \n  cudaEventCreate(&start); \n  cudaEventCreate(&stop); \n } \n  \n ~GpuTimer() { \n  cudaEventDestroy(start); \n  cudaEventDestroy(stop); \n } \n  \n void Start(){ \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 14 / 34 \n  cudaEventRecord(start, 0); \n } \n  \n void Stop() { \n  cudaEventRecord(stop, 0); \n } \n  \n    float Elapsed() { \n  float elapsed; \n  cudaEventSynchronize(stop); \n  cudaEventElapsedTime(&elapsed, start, stop); \n  return elapsed; \n } \n \n void StopAndPrint(std::ostream &os, const char *content) { \n  this->Stop(); \n  os << \"[\"<< content <<\"]=\"  \n   << std::fixed << std::setprecision(10) <<  this->Elapsed() << \" \nmsecs. \" << std::endl; \n } \n}; \n \n// CudaTimer class from: https://bitbucket.org/ashwin/cudatimer \nclass CudaTimer { \nprivate: \n double        _freq; \n LARGE_INTEGER _time1; \n LARGE_INTEGER _time2; \n \npublic: \n CudaTimer::CudaTimer() { \n  LARGE_INTEGER freq; \n  QueryPerformanceFrequency(&freq); \n  _freq = 1.0 / freq.QuadPart; \n  return; \n } \n \n void Start() { \n  cudaDeviceSynchronize(); \n  QueryPerformanceCounter(&_time1); \n  return; \n } \n \n    void Stop() { \n  cudaDeviceSynchronize(); \n  QueryPerformanceCounter(&_time2); \n  return; \n } \n \n    double Elapsed() const { \n  return (_time2.QuadPart - _time1.QuadPart) * _freq * 1000; \n } \n \n void StopAndPrint(std::ostream &os, const char *content) { \n  this->Stop(); \n  os << \"[\"<< content <<\"]=\"  \n   << std::fixed << std::setprecision(10)  \n   <<  this->Elapsed() << \" msecs. \" << std::endl; \n } \n}; \n#endif /* __UTILS_H__ */", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2595, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9eea7ae4-862f-48eb-b24b-3203c98f7e8b": {"__data__": {"id_": "9eea7ae4-862f-48eb-b24b-3203c98f7e8b", "embedding": null, "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "324cead7-05de-4daf-9ede-5067534a5fda", "node_type": "4", "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "33bc2db6134ce146d59683b0df02872d6f37c770d31d4d196c54879f895ccdf5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "618116f8-9629-453e-b9d5-b446a11909d3", "node_type": "1", "metadata": {}, "hash": "eab6a007d1164b0ea2738e61f9522c0a8ae9bf9f3db842e01f7300039fa9e405", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 15 / 34 \nExercise 4. VectorAdd_11 \nWrite a program to add two vectors.  \nx The host launches kernel [1,1] to solve problem.  \nx The program logs time of host and cuda code segment: initialize, copy, malloc, launch, free, \u2026 \nx After that, write the analysis data table and graph for Total Run Time \nDataset # Description Result Total Run Time Gpu Time \n1 1000 Correct?? ?? \n\u2026 \u2026 \u2026 \u2026 \u2026 \nExample Console Outputs: \n[Initialize data and creating memory on host]=0.5579472021 msecs. \n[The number of input elements in the input is]=33792 \n[Allocating GPU memory]=0.4394533983 msecs. \n[Copying input memory to the GPU]=0.3144284400 msecs. \n[Performing CUDA computation]=8.3080950861 msecs.\n[Copying output memory to the CPU]=0.3722758088 msecs. \n[RET]=We did it! \n[Freeing GPU Memory]=0.1740086174 msecs. \n[Freeing Host Memory]=0.1866044154 msecs. \nPress any key to continue . . .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 925, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "618116f8-9629-453e-b9d5-b446a11909d3": {"__data__": {"id_": "618116f8-9629-453e-b9d5-b446a11909d3", "embedding": null, "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "324cead7-05de-4daf-9ede-5067534a5fda", "node_type": "4", "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "33bc2db6134ce146d59683b0df02872d6f37c770d31d4d196c54879f895ccdf5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9eea7ae4-862f-48eb-b24b-3203c98f7e8b", "node_type": "1", "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "1542f7dc29cbd82fc842f72d72a9d242d2495664548fa64b6a97fd10db980440", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "?? \n\u2026 \u2026 \u2026 \u2026 \u2026 \nExample Console Outputs: \n[Initialize data and creating memory on host]=0.5579472021 msecs. \n[The number of input elements in the input is]=33792 \n[Allocating GPU memory]=0.4394533983 msecs. \n[Copying input memory to the GPU]=0.3144284400 msecs. \n[Performing CUDA computation]=8.3080950861 msecs.\n[Copying output memory to the CPU]=0.3722758088 msecs. \n[RET]=We did it! \n[Freeing GPU Memory]=0.1740086174 msecs. \n[Freeing Host Memory]=0.1866044154 msecs. \nPress any key to continue . . . \nEx1_VectorAdd_11.cu \n#include <iostream> \n#include \"utils/utils.h\" \n#include <cuda_runtime.h> \n \nusing namespace std; \n \n#define N 1024 * 33 \n \n__global__ void add( int *a, int *b, int *c ) {     \n    int tid = 0; \n    // loop over all the element in the vector \n    while (tid < N){ \n        c[tid] = a[tid] + b[tid]; \n        tid += 1; // we are using one thread in one block \n    } \n} \n \nint main( void ) { \n \n    int *a, *b, *c; \n    int *dev_a, *dev_b, *dev_c; \n \n CudaTimer timer; \n \n /* Initialize data and creating memory on host */ \n timer.Start(); \n \n    a = (int*)malloc( N * sizeof(int) ); \n    b = (int*)malloc( N * sizeof(int) ); \n    c = (int*)malloc( N * sizeof(int) ); \n \n    for (int i=0; i<N; i++) { \n        a[i] = -i; \n        b[i] = i * i; \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 16 / 34 \n    } \n \ntimer.StopAndPrint(cout, \"Initialize data and creating memory on host\");\n    cout << \"[The number of input elements in the input is]=\" << N << endl; \n \n    /* Allocating GPU memory */ \n    timer.Start(); \n \n    checkCudaErrors( cudaMalloc( (void**)&dev_a, N * sizeof(int))  ); \n    checkCudaErrors(  cudaMalloc( (void**)&dev_b, N * sizeof(int)) ); \n    checkCudaErrors(  cudaMalloc( (void**)&dev_c, N * sizeof(int)) ); \n \n timer.StopAndPrint(cout, \"Allocating GPU memory\"); \n \n    /* Copying input memory to the GPU */ \n    timer.Start(); \n \n    checkCudaErrors( cudaMemcpy(dev_a, a, N * sizeof(int),cudaMemcpyHostToDevice) ); \n    checkCudaErrors( cudaMemcpy(dev_b, b, N * sizeof(int),cudaMemcpyHostToDevice) ); \n \n    timer.StopAndPrint(cout, \"Copying input memory to the GPU\"); \n \n    /* Launch the GPU Kernel */ \n    timer.Start(); \n \n    add<<<1,1>>>( dev_a, dev_b, dev_c ); \n \n    timer.StopAndPrint(cout, \"Performing CUDA computation\"); \n \n    /* Copying output memory to the CPU */ \n    timer.Start(); \n     \n    checkCudaErrors( cudaMemcpy(c, dev_c,N*sizeof(int),cudaMemcpyDeviceToHost) ); \n \n    timer.StopAndPrint(cout, \"Copying output memory to the CPU\"); \n \n    // verify that the GPU did the work we requested \n    bool success = true; \n    for (int i=0; i<N; i++) { \n        if ((a[i] + b[i]) != c[i]) { \n            printf( \"[RET]=Error:  %d + %d != %d\\n\", a[i], b[i], c[i] ); \n            success = false; \n        } \n    } \n    if (success)  printf( \"[RET]=We did it!\\n\" ); \n \n    /* Freeing GPU Memory */ \n    timer.Start(); \n \n    checkCudaErrors( cudaFree(dev_a) ); \n    checkCudaErrors( cudaFree(dev_b) ); \n    checkCudaErrors( cudaFree(dev_c) ); \n \n    timer.StopAndPrint(cout, \"Freeing GPU Memory\"); \n \n /* Freeing Host Memory */ \n timer.Start(); \n \n    free(a); \n    free(b); \n    free(c);", "mimetype": "text/plain", "start_char_idx": 423, "end_char_idx": 3576, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cb4e034-3706-45a3-a9e3-d1f0fcfbb8a9": {"__data__": {"id_": "5cb4e034-3706-45a3-a9e3-d1f0fcfbb8a9", "embedding": null, "metadata": {"page_label": "46", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a3369f8-4bf6-4381-a948-38364e8d8704", "node_type": "4", "metadata": {"page_label": "46", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "298686f13ef3c0881ec443bdcdcbec1b8dce318f3d334082f1c10c48d2bbc5d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 17 / 34 \n    timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n    system(\"PAUSE\"); \n    return 0; \n} \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 18 / 34 \nLAB 02: VECTOR ADDITION \nObjective \nThe purpose of this lab is to get you familiar with using the CUDA API by implementing a simple vector \naddition kernel and its associated setup code. \nExercise \nVector sum (c = a + b) \nx Create vectors a, b, c on the host  and load data a, b from file \u201cLAB02.INP\u201d \nx Create vectors a, b, c in the device \nx Copy the contents of the vectors a and b on host to device \nx Initialize the grid and block dimensions, and launch kernel to add a and b on device \nx Copy the result on device to the host  \nx Write result vector c on host into file \u201cLAB02.OUT\u201d \nx Free Device and Host Memory \nSample\nLAB02.INP LAB02.OUT \n4 \n1 2 3 4 \n5 6 7 8 \n4 \n6 8 10 12 \nReport \nDataset # Description Result Total Run Time Gpu Time \n\u2026 \u2026 \u2026 \u2026 \u2026 \nIdea \n \nConsole Output Samples \n[Importing data and creating memory on host]=3803.5237444788 msecs. \n[The input length]=100000 \n[Allocating GPU memory]=1.6509825655 msecs. \n[Copying input memory to the GPU]=0.4613794172 msecs.\n[Performing CUDA computation]=0.2290239930 msecs. \n[Copying output memory to the CPU]=0.7622790370 msecs. \n[Freeing GPU Memory]=0.2234587875 msecs. \n[Output results]=649.8741353218 msecs. \n[Freeing Host Memory]=0.4263910893 msecs. \nPress any key to continue . . . \nExercise 1. GenVectorAdd \nWrite a program to generate data set for problem \u201cvector addition\u201d \nEx2_GenVectorAdd.cpp \n/* \nex2_gen_vector_add.cpp:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1611, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70ca0297-aac0-48f8-931c-a6e8c54bb1a2": {"__data__": {"id_": "70ca0297-aac0-48f8-931c-a6e8c54bb1a2", "embedding": null, "metadata": {"page_label": "47", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b50c50dd-b71f-4ed8-a606-f386a37778c5", "node_type": "4", "metadata": {"page_label": "47", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "b49636c7141da1c69fd4886d9f25f9b583fb01db8341015134d7e7da63a78cae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 19 / 34 \nGenerate data for assignment ex2_vector_add.cu\n*/ \n#include <cassert> \n#include <cmath> \n#include <cstdlib> \n#include <fstream> \n#include <iostream> \n#include <vector> \ntypedef std::vector< float > FloatVec; \n \nfloat genRandomFloat() \n{ \n    return ( (float) rand() / RAND_MAX ); \n} \n \nvoid genVector( FloatVec& vec, int vecLen ) \n{ \n    for ( int i = 0; i < vecLen; ++i ) \n        vec.push_back( genRandomFloat() ); \n} \n \nvoid addVector( const FloatVec& vecA, const FloatVec& vecB, FloatVec& vecC ) \n{ \n    assert( vecA.size() == vecB.size() ); \n \n    for ( int i = 0; i < (int) vecA.size(); ++i ) \n        vecC.push_back( vecA[i] + vecB[i] ); \n} \n \nvoid writeVector( const FloatVec& vec, const char* fname ) \n{ \n    std::ofstream outFile( fname ); \n \n    if ( !outFile ) \n    { \n        std::cout << \"Error! Opening file: \" << fname << \" for writing vector.\\n\"; \n        exit(1); \n    } \n \nstd::cout << \"Writing vector to file: \"<< fname<< std::endl;\n \n    const int vecLen = (int) vec.size(); \n \n    outFile << vecLen << std::endl; \n \n    for ( int i = 0; i < vecLen; ++i ) \n        outFile << vec[i] << \" \";\noutFile << std::endl;\n} \n \nvoid writeResults( const FloatVec& vec1, const FloatVec& vec2, const char* fname ) \n{ \n    std::ofstream outFile( fname ); \n \n    if ( !outFile ) \n    { \n        std::cout << \"Error! Opening file: \" << fname << \" for writing vector.\\n\"; \n        exit(1); \n    } \n \n    std::cout << \"Writing vector to file: \" << fname << std::endl; \n \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 20 / 34 \nconst intvecLen = (int) vec1.size();\n \n    outFile << vecLen << std::endl; \n \n    for ( int i = 0; i < vecLen; ++i ) \n        outFile << vec1[i] << \" \"; \n outFile << std::endl; \n for ( int i = 0; i < vecLen; ++i ) \noutFile << vec2[i] << \" \";\n outFile << std::endl; \n} \n \nint main( int argc, const char** argv ) \n{ \n    // Info for user \n \n    std::cout << \"ex2_gen_vector_add: Generates data files to use as input for assignment \nex2_vector_add.\\n\"; \n    std::cout << \"Invoke as: ex2_gen_vector_add [VectorLength]\\n\\n\"; \n \n    // Read input \n \n    if ( 2 != argc ) \n    { \n        std::cout << \"Error! Wrong number of arguments to program.\\n\"; \n        return 0; \n    } \n \n    // Create vectors \n \n    const int vecLen = atoi( argv[1] ); \n \n    FloatVec vecA; \n    FloatVec vecB; \n    FloatVec vecC; \n \n    genVector( vecA, vecLen ); \n    genVector( vecB, vecLen ); \n    addVector( vecA, vecB, vecC ); \n \n// Write to files\n \n    writeResults( vecA, vecB, \"LAB02.INP\" ); \n writeVector ( vecC, \"LAB02.TXT\" ); \n    return 0; \n} \nExercise 2. VectorAdd_NoCuda \nWrite a program to calculate sum of two vector without Cuda \nEx2_VectorAdd_NoCuda \n#include <iostream> \n#include <fstream> \n#include \"utils/utils.h\" \n \n#define INPUT_FILE \"LAB02.INP\" \n#define OUTPUT_FILE \"LAB02.OUT\" \n \nusing namespace std; \n \nvoid vecAdd(float * in1, float * in2, float * out, int len) { \n // TODO \n int idx = 0;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2985, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a130a70-c6a0-4bb4-9623-8162bcf6bca6": {"__data__": {"id_": "7a130a70-c6a0-4bb4-9623-8162bcf6bca6", "embedding": null, "metadata": {"page_label": "48", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7fa74bd-c3ca-419b-8cfe-eac07d9741e1", "node_type": "4", "metadata": {"page_label": "48", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "c95822a99bc3a82773480aff623083d7193d0db3e44652616f72c66ea0643fb3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 21 / 34 \nwhile(idx<len)\n { \n  out[idx] = in1[idx] + in2[idx]; \n  idx++; \n } \n} \n \nint main(int argc, char ** argv) \n{\n int inputLength; \n float *hostInput1, *hostInput2, *hostOutput; \n  \n CudaTimer timer; \n  \n /* Importing data and creating memory on host */ \n ifstream finp(INPUT_FILE); \n timer.Start(); \n \n // TODO \n finp >> inputLength; \n int byteSize = sizeof(float) * inputLength; \n hostInput1 = (float *)malloc(byteSize); \n hostInput2 = (float *)malloc(byteSize); \n hostOutput = (float *)malloc(byteSize); \n for (int i = 0; i< inputLength; i++) \n { \n  finp >> hostInput1[i]; \n } \n for (int i = 0; i< inputLength; i++) \n { \n  finp >> hostInput2[i]; \n } \n timer.StopAndPrint(cout, \"Importing data and creating memory on host\"); \n cout << \"[The input length]=\" << inputLength << endl; \n finp.close(); \n \n /* Launch the GPU Kernel */ \n timer.Start(); \n // TODO \n vecAdd(hostInput1, hostInput2, hostOutput, inputLength); \n timer.StopAndPrint(cout, \"Performing CPU computation\"); \n \n /* Output results */ \n ofstream fout(OUTPUT_FILE); \n timer.Start(); \n // TODO \n fout << inputLength << endl; \nfor(inti = 0; i<inputLength; i++)\n { \n  fout << hostOutput[i] << \" \"; \n } \n fout << endl; \n \n timer.StopAndPrint(cout, \"Output results\"); \n fout.close(); \n \n /* Freeing Host Memory */ \n timer.Start(); \n \n free(hostInput1); \n free(hostInput2); \n free(hostOutput); \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 22 / 34 \n timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n \n system(\"PAUSE\"); \n \n return 0; \n} \nOutput \n[Importing data and creating memory on host]=3852.7010056112 msecs. \n[The input length]=100000 \n[Performing CPU computation]=0.5052314548 msecs. \n[Output results]=666.8961900977 msecs. \n[Freeing Host Memory]=0.3657446543 msecs. \nPress any key to continue . . . \nExercise 3. VectorAdd \nWrite a program to calculate sum of two vector using Cuda \nEx2_VectorAdd.cu \n#include <iostream> \n#include <fstream> \n#include \"utils/utils.h\" \n#include <cuda_runtime.h> \n \n#define INPUT_FILE \"LAB02.INP\" \n#define OUTPUT_FILE \"LAB02.OUT\" \n \nusing namespace std; \n \n__global__ void vecAdd(float * in1, float * in2, float * out, int len) { \n    // TODO \n int idx = blockIdx.x * blockDim.x + threadIdx.x; \n    if (idx<len)  \n { \n  out[idx] = in1[idx] + in2[idx]; \n  // DEBUG \n  // printf(\"[gsize=%d,bsize=%d,b_id=%d,th_id=%d]: %d: [%g]+[%g]=%g\\n\", \n  //  gridDim.x, blockDim.x, blockIdx.x, threadIdx.x, \n  //  idx, in1[idx], in2[idx], out[idx]); \n } \n} \n \nint main(int argc, char ** argv) \n{ \n int inputLength; \n    float *hostInput1, *hostInput2, *hostOutput; \n    float *deviceInput1, *deviceInput2, *deviceOutput; \n  \n CudaTimer timer; \n GpuTimer gpuTimer; \n \n /* Importing data and creating memory on host */ \n ifstream finp(INPUT_FILE); \n timer.Start(); \n \n // TODO \n finp >> inputLength; \n int byteSize = sizeof(float) * inputLength; \n hostInput1 = (float *)malloc(byteSize); \n hostInput2 = (float *)malloc(byteSize); \n hostOutput = (float *)malloc(byteSize);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3018, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd2ec0b3-f277-406d-8591-2e2b73bf0344": {"__data__": {"id_": "fd2ec0b3-f277-406d-8591-2e2b73bf0344", "embedding": null, "metadata": {"page_label": "49", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a44f7418-5434-447b-9171-63ea3199f936", "node_type": "4", "metadata": {"page_label": "49", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "4d214349d61ff1d8c6b47c02ca7d2c28bd7d4b983ad648338756634753041612", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 23 / 34 \nfor(inti=0; i< inputLength; i++)\n { \n  finp >> hostInput1[i]; \n } \n for(int i=0; i< inputLength; i++)\n { \n  finp >> hostInput2[i]; \n } \ntimer.StopAndPrint(cout, \"Importing data and creating memory on host\");\n cout << \"[The input length]=\" << inputLength << endl; \n finp.close(); \n     \n \n /* Allocating GPU memory */ \n timer.Start(); \n // TODO \n cudaMalloc((void **) &deviceInput1, byteSize); \n    cudaMalloc((void **) &deviceInput2, byteSize); \n cudaMalloc((void **) &deviceOutput, byteSize); \n \n timer.StopAndPrint(cout,\"Allocating GPU memory\"); \n  \n  \n /* Copying input memory to the GPU */ \n timer.Start(); \n // TODO \n cudaMemcpy(deviceInput1, hostInput1, byteSize,cudaMemcpyHostToDevice); \n    cudaMemcpy(deviceInput2, hostInput2, byteSize,cudaMemcpyHostToDevice); \n \n timer.StopAndPrint(cout, \"Copying input memory to the GPU\"); \n \n /* Initialize the grid and block dimensions */ \n    // TODO \n int block_size = 1024; \n    int n_blocks = inputLength /block_size + (inputLength%block_size == 0 ? 0:1); \n \n /* Launch the GPU Kernel */ \n gpuTimer.Start(); \n // TODO \n vecAdd<<<n_blocks, block_size >>>(deviceInput1, deviceInput2, deviceOutput, inputLength); \n cudaThreadSynchronize(); \n gpuTimer.StopAndPrint(cout, \"Performing CUDA computation\"); \n \n /* Copying output memory to the CPU */ \n timer.Start(); \n // TODO \n cudaMemcpy(hostOutput, deviceOutput, byteSize,cudaMemcpyDeviceToHost); \n timer.StopAndPrint(cout, \"Copying output memory to the CPU\"); \n     \n /* Freeing GPU Memory */ \n timer.Start(); \n // TODO \n cudaFree(deviceInput1); \n cudaFree(deviceInput2); \n cudaFree(deviceOutput); \n \n timer.StopAndPrint(cout, \"Freeing GPU Memory\"); \n \n /* Output results */ \n ofstream fout(OUTPUT_FILE); \n timer.Start(); \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 24 / 34 \n// TODO\n fout << inputLength << endl; \n for(int i=0; i<inputLength; i++) \n { \n  fout << hostOutput[i] << \" \"; \n } \n fout << endl; \n \ntimer.StopAndPrint(cout, \"Output results\");\n fout.close(); \n \n /* Freeing Host Memory */ \n timer.Start(); \n \n free(hostInput1); \n free(hostInput2); \n free(hostOutput); \n \n timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n \n system(\"PAUSE\"); \n \n    return 0; \n} \nOutput \n[Importing data and creating memory on host]=3803.5237444788 msecs. \n[The input length]=100000 \n[Allocating GPU memory]=1.6509825655 msecs. \n[Copying input memory to the GPU]=0.4613794172 msecs. \n[Performing CUDA computation]=0.2290239930 msecs. \n[Copying output memory to the CPU]=0.7622790370 msecs. \n[Freeing GPU Memory]=0.2234587875 msecs. \n[Output results]=649.8741353218 msecs. \n[Freeing Host Memory]=0.4263910893 msecs. \nPress any key to continue . . .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a86897b4-887a-4667-8b06-0a56093135c2": {"__data__": {"id_": "a86897b4-887a-4667-8b06-0a56093135c2", "embedding": null, "metadata": {"page_label": "50", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f01b4871-1835-4944-a695-b1e57ed3484a", "node_type": "4", "metadata": {"page_label": "50", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "2b8cd8bdfd7c1fbd8577157daca7902c4287da0da778f779378ce36584ebccd3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 25 / 34 \nLAB 03: BASIC MATRIX-MATRIX MULTIPLICATION \nObjective \nImplement a basic dense matrix multiplication routine. \nExercise \nDense Matrix Multiplication  (c = a * b) \nx Create matrix a, b, c on the host  and load data a, b from file \u201cLAB03.INP\u201d \nx Create matrix  a, b, c in the device \nx Copy the contents of the matrix a and b on host to device \nx Initialize the grid and block dimensions, and launch kernel to multiply a and b on device \nx Copy the result on device to the host  \nx Write result matrix c on host into file \u201cLAB03.OUT\u201d \nx Free Device and Host Memory \nSample \nLAB03.INP LAB03.OUT \n2 3 \n0.00125126 0.563585 0.193304  \n0.80874 0.585009 0.479873  \n3 4 \n0.350291 0.895962 0.82284 0.746605  0.174108 0.858943 0.710501 0.513535  \n0.303995 0.0149846 0.0914029 0.364452 \n2 4 \n0.157327 0.488106 0.419126 0.360805  \n0.531029 1.23428 1.12498 1.07912 \nReport \nDataset # Description Result Total Run Time Gpu Time \n\u2026 \u2026 \u2026 \u2026 \u2026 \nIdea \nMatrix multiplication \n \nTile=2, Block(0,0) \n \n \nTile=2, Block(0,1) \n \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 26 / 34 \nConsole Output Samples \n[Importing data and creating memory on host]=884.9145258475 msecs. \n[The dimensions of A]=200 x 100 \n[The dimensions of B]=100 x 256 \n[The dimensions of C]=200 x 256 \n[Allocating GPU memory]=1.2577137600 msecs. \n[Copying input memory to the GPU]=0.1651449077 msecs. \n[Performing CUDA computation]=3.6639039516 msecs. \n[Copying output memory to the CPU]=0.1506830655 msecs. \n[Freeing GPU Memory]=0.1768076836 msecs. \n[Output results]=348.1735159817 msecs. \n[Freeing Host Memory]=0.4119292471 msecs. \nPress any key to continue . . . \nExercise 1. GenMatrixDenseMul \nWrite a program to generate data set for problem \u201cdense matrix multiplication\u201d \nEx3_GenMatrixDenseMul.cpp \n/*  \nex3_gen_matrix_dense_mul.cpp:  \nGenerate data for assignment ex3_matrix_dense_mul.cu \n*/ \n#include <cmath> \n#include <cstdlib> \n#include <fstream> \n#include <iostream> \n \nfloat genRandomFloat() \n{ \n    return ( (float) rand() / RAND_MAX ); \n} \n \nvoid genMatrix( float* mat, int rows, int cols ) \n{ \n    for ( int r = 0; r < rows; ++r ) \n        for ( int c = 0; c < cols; ++c ) \n            mat[ cols * r + c ] = genRandomFloat(); \n} \n \nvoid mulMatrices \n( \n const float* matA, \n const float* matB, \n float*       matC, \n int ARows, \n int ACols, \n int BCols \n) \n{ \n    const int CRows = ARows; \n    const int CCols = BCols; \n \n    for ( int r = 0; r < CRows; ++r ) \n    { \n        for ( int c = 0; c < CCols; ++c ) \n        { \n            float sum = 0.0; \n \n            for ( int z = 0; z < ACols; ++z ) \n                sum += matA[ ACols * r + z ] * matB[ BCols * z + c ]; \n \n            matC[ CCols * r + c ] = sum;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2746, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1090be1b-5a94-4e87-8531-33add6ee482a": {"__data__": {"id_": "1090be1b-5a94-4e87-8531-33add6ee482a", "embedding": null, "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "590fe819-90f6-449f-b71c-d2e0ca8e6d78", "node_type": "4", "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "62e8a45dcd389938fe173bbc625846da0b95351c3cc9be298df5a0c9985198ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76344d78-ec43-4e55-aadb-6de497a5c056", "node_type": "1", "metadata": {}, "hash": "27dfd4f4fdad1044c91bd5e2efdccefd61ecb8970087960d4d188ae2f6b82a53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 27 / 34 \n}\n    } \n} \n \nvoid writeMatrix( const float* mat, int rows, int cols, const char* fname ) \n{ \n    std::ofstream outFile( fname ); \n \nif( !outFile )\n    { \n        std::cout << \"Error! Opening file: \" << fname << \" for writing matrix\\n\"; \n        exit(1); \n    } \n \n    std::cout << \"Writing matrix to file: \" << fname << std::endl; \n \n    outFile << rows << \" \" << cols << std::endl; \n     \n int idx = 0; \n \n    for ( int r = 0; r < rows; ++r ) \n    { \n        for ( int c = 0; c < cols; ++c ) \n        { \n            outFile << mat[ idx++ ] << \" \"; \n        } \n \n        outFile << std::endl; \n    } \n} \n \nvoid writeInput( \n const float* matA, int rowsA, intcolsA,  \n const float* matB, int rowsB, intcolsB,  \n const char* fname \n) \n{ \n std::ofstream outFile( fname ); \n \n    if ( !outFile ) \n{\n        std::cout << \"Error! Opening file: \" << fname << \" for writing matrix\\n\"; \n        exit(1); \n    } \n \n    std::cout << \"Writing matrix to file: \" << fname << std::endl; \n \n    outFile << rowsA << \" \" << colsA << std::endl; \nintidx = 0;\n    for ( int r = 0; r < rowsA; ++r ) \n    { \n        for ( int c = 0; c < colsA; ++c ) \n        { \n            outFile << matA[ idx++ ] << \" \"; \n        } \n        outFile << std::endl; \n    } \n \n outFile << rowsB << \" \" << colsB << std::endl; \n idx = 0; \n    for ( int r = 0; r < rowsB; ++r ) \n    { \n        for ( int c = 0; c < colsB; ++c ) \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 28 / 34 \n{\n            outFile << matB[ idx++ ] << \" \"; \n        } \n        outFile << std::endl; \n    } \n} \n \nint main( int argc, const char** argv ) \n{\n    // Info for user \n \n    std::cout << \"GenDataMP2: Generates data files to use as input for assignment MP2.\\n\"; \n    std::cout << \"Invoke as: GenDataMP2 [MatrixARows] [MatrixAColumns] [MatrixBColumns]\\n\\n\"; \n \n    std::cout << \"Datasets used in online submission are ...\\n\"; \n    std::cout << \"Dataset0:  64  64  64\\n\"; \n    std::cout << \"Dataset1: 128  64 128\\n\"; \n    std::cout << \"Dataset2: 100 128  56\\n\"; \n    std::cout << \"Dataset3: 256 128 256\\n\"; \n    std::cout << \"Dataset4:  32 128  32\\n\"; \n    std::cout << \"Dataset5: 200 100 256\\n\\n\"; \n \n    // Read input \n \n    if ( 4 != argc ) \n    { \n        std::cout << \"Error!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "76344d78-ec43-4e55-aadb-6de497a5c056": {"__data__": {"id_": "76344d78-ec43-4e55-aadb-6de497a5c056", "embedding": null, "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "590fe819-90f6-449f-b71c-d2e0ca8e6d78", "node_type": "4", "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "62e8a45dcd389938fe173bbc625846da0b95351c3cc9be298df5a0c9985198ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1090be1b-5a94-4e87-8531-33add6ee482a", "node_type": "1", "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "32b89a161c1e028f0cc314a4a1dcbb63661a3cd193958ab5d886c0c8e66e58ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Wrong number of arguments to program.\\n\"; \n        return 0; \n    } \n \n    const int ARows = atoi( argv[1] ); \n    const int ACols = atoi( argv[2] ); \n    const int BRows = ACols; \n    const int BCols = atoi( argv[3] ); \n    const int CRows = ARows; \n    const int CCols = BCols; \n \n    std::cout << \"Dimensions of matrix A = [\" << ARows << \" x \" << ACols << \"]\\n\"; \n    std::cout << \"Dimensions of matrix B = [\" << BRows << \" x \" << BCols << \"]\\n\"; \n    std::cout << \"Dimensions of matrix C = [\" << CRows << \" x \" << CCols << \"]\\n\"; \n    // Memory for matrices \n \n    float* matA = new float[ ARows * ACols ]; \n    float* matB = new float[ BRows * BCols ]; \n    float* matC = new float[ CRows * CCols ]; \n \n    // Create matrices \n    genMatrix( matA, ARows, ACols ); \n    genMatrix( matB, BRows, BCols ); \n    mulMatrices( matA, matB, matC, ARows, ACols, BCols ); \n \n    // Write to files \n \n    writeInput( matA, ARows, ACols, matB, BRows, BCols, \"LAB03.INP\" ); \n    writeMatrix( matC, CRows, CCols, \"LAB03.TXT\" ); \n \n    return 0; \n} \nExercise 2. MatrixDenseMul_NoCuda \nWrite a program to calculate multiplication of two dense matrixes without Cuda", "mimetype": "text/plain", "start_char_idx": 2289, "end_char_idx": 3441, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e524f6e7-9c59-42b4-9006-0e77378ff996": {"__data__": {"id_": "e524f6e7-9c59-42b4-9006-0e77378ff996", "embedding": null, "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b5d2055-b0bb-4f64-b0e6-c434be595952", "node_type": "4", "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "cd77215616c0d846ed81e0b69d9ec8adfed587889dfb6e5b82ba162172bfc3bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b7fb809-a873-405f-9988-1c9f9b0243db", "node_type": "1", "metadata": {}, "hash": "b7e3a620c305ed04e3e91ea3c2027103731c66e5591212ae5502eeae39bfe395", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 29 / 34 \nEx3_MatrixDenseMul_NoCuda.cpp \n#include <iostream> \n#include<fstream>\n#include <string> \n#include \"utils/utils.h\" \n#include <cuda_runtime.h> \n \n#define INPUT_FILE \"LAB03.INP\" \n#define OUTPUT_FILE \"LAB03.OUT\" \n \nusing namespacestd;\n \n#define THREADS 32 \n#define MAX_BLOCKS(size) \\ \n ((size-1)/THREADS + 1) \n \n// Compute C = A * B \nvoid matrixMultiply(float * A, float * B, float * C, \n int numARows, int numAColumns, \n int numBRows, int numBColumns, \n int numCRows, int numCColumns) \n{ \n // TODO \n int row, col, k; \n  \n for (row = 0; row < numCRows; row++) \n { \n  for (col = 0; col < numCColumns; col++) \n  { \n   float value = 0; \n   for (k = 0; k < numAColumns; ++k) \n   {  \n    value += A[row * numAColumns + k] * B[k * numBColumns + col]; \n   }  \n   C[row * numCColumns + col] = value; \n  } \n } \n} \n \nint main(int argc, char ** argv) \n{ \n float *hostA, *hostB, *hostC; // The A, B, and C (output) matrix \nintnumARows; // number of rows in the matrix A\n int numAColumns; // number of columns in the matrix A \n int numBRows; // number of rows in the matrix B \n int numBColumns; // number of columns in the matrix B \n int numCRows; // number of rows in the matrix C (you have to set this) \n int numCColumns; // number of columns in the matrix C (you have to set this) \n \n int i, j; \nCudaTimertimer;\n \n /* Importing data and creating memory on host */ \n ifstream finp(INPUT_FILE); \n timer.Start(); \n // TODO \n finp >> numARows >> numAColumns; \n \n int byteSizeA = sizeof(float) * numARows * numAColumns; \n hostA = (float *)malloc(byteSizeA); \n for (i = 0; i < numARows; i++) \n { \n  for (j = 0; j < numAColumns; j++) \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 30 / 34 \n{\n   finp >> hostA[i*numAColumns + j]; \n  } \n } \n \n finp >> numBRows >> numBColumns; \n int byteSizeB = sizeof(float) * numBRows * numBColumns; \n hostB = (float *)malloc(byteSizeB); \nfor(i = 0; i < numBRows; i++)\n { \n  for (j = 0; j < numBColumns; j++) \n  { \n   finp >> hostB[i*numBColumns + j]; \n  } \n } \n // Set numCRows and numCColumns \n // TODO \n numCRows = numARows; \n numCColumns = numBColumns; \n \n // Allocate the hostC matrix \n // TODO \n int byteSizeC = sizeof(float) * numCRows * numCColumns; \n hostC = (float *)malloc(byteSizeC); \n \n timer.StopAndPrint(cout, \"Importing data and creating memory on host\"); \n \n cout << \"[The dimensions of A]=\" << numARows << \" x \" << numAColumns << endl; \n cout << \"[The dimensions of B]=\" << numBRows << \" x \" << numBColumns << endl; \n cout << \"[The dimensions of C]=\" << numCRows << \" x \" << numCColumns << endl; \n \n /* Launch the CPU Kernel */ \n timer.Start(); \n // TODO \n matrixMultiply(hostA, hostB, hostC, \n  numARows, numAColumns, \n  numBRows, numBColumns, \n  numCRows, numCColumns); \n \n timer.StopAndPrint(cout, \"Performing CPU computation\"); \n /* Output results */ \n ofstream fout(OUTPUT_FILE); \n timer.Start(); \n // TODO \n fout << numCRows << \" \" << numCColumns << endl; \n for (i = 0; i < numCRows; i++) \n { \nfor(j = 0; j < numCColumns;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3028, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b7fb809-a873-405f-9988-1c9f9b0243db": {"__data__": {"id_": "1b7fb809-a873-405f-9988-1c9f9b0243db", "embedding": null, "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b5d2055-b0bb-4f64-b0e6-c434be595952", "node_type": "4", "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "cd77215616c0d846ed81e0b69d9ec8adfed587889dfb6e5b82ba162172bfc3bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e524f6e7-9c59-42b4-9006-0e77378ff996", "node_type": "1", "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "0d578dcf08b595e09eb0df45aff7192c86b18f402b3954e5ae6504db8061aabc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "cout << \"[The dimensions of B]=\" << numBRows << \" x \" << numBColumns << endl; \n cout << \"[The dimensions of C]=\" << numCRows << \" x \" << numCColumns << endl; \n \n /* Launch the CPU Kernel */ \n timer.Start(); \n // TODO \n matrixMultiply(hostA, hostB, hostC, \n  numARows, numAColumns, \n  numBRows, numBColumns, \n  numCRows, numCColumns); \n \n timer.StopAndPrint(cout, \"Performing CPU computation\"); \n /* Output results */ \n ofstream fout(OUTPUT_FILE); \n timer.Start(); \n // TODO \n fout << numCRows << \" \" << numCColumns << endl; \n for (i = 0; i < numCRows; i++) \n { \nfor(j = 0; j < numCColumns; j++)\n  { \n   fout << hostC[i * numCColumns + j] << \" \";\n  } \n  fout << endl; \n } \n \n timer.StopAndPrint(cout, \"Output results\"); \n fout.close(); \n \n /* Freeing Host Memory */ \n timer.Start(); \n \n free(hostA); \n free(hostB);", "mimetype": "text/plain", "start_char_idx": 2439, "end_char_idx": 3252, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0ba49a6-f874-43b1-82c5-a50b0e30bd3e": {"__data__": {"id_": "a0ba49a6-f874-43b1-82c5-a50b0e30bd3e", "embedding": null, "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4573aa17-c9b8-4546-a654-7a40acaee3ca", "node_type": "4", "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "c74d3f5ae3807cabde459793b4d777544bd54819d62b7bf1831d0baa19c8acdc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2456fc04-9ee7-4506-80f0-2ee5273c1be7", "node_type": "1", "metadata": {}, "hash": "d72c3859d3a30e293193f0e5754d3b64adf9d6c58357ef29a5047d271640c1c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 31 / 34 \nfree(hostC);\n \n timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n \n system(\"PAUSE\"); \n \n return 0; \n} \nOutput \n[Importing data and creating memory on host]=899.7868977576 msecs. \n[The dimensions of A]=200 x 100 \n[The dimensions of B]=100 x 256 \n[The dimensions of C]=200 x 256 \n[Performing CPU computation]=27.4121886272 msecs. \n[Output results]=386.2818697016 msecs. \n[Freeing Host Memory]=0.2537820050 msecs. \nPress any key to continue . . . \nExercise 3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 520, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2456fc04-9ee7-4506-80f0-2ee5273c1be7": {"__data__": {"id_": "2456fc04-9ee7-4506-80f0-2ee5273c1be7", "embedding": null, "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4573aa17-c9b8-4546-a654-7a40acaee3ca", "node_type": "4", "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "c74d3f5ae3807cabde459793b4d777544bd54819d62b7bf1831d0baa19c8acdc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0ba49a6-f874-43b1-82c5-a50b0e30bd3e", "node_type": "1", "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "e6690d3f0ec19ec53f2ce9b7716e42809902f1f47ce6c528d056171cdf4d9c6b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 31 / 34 \nfree(hostC);\n \n timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n \n system(\"PAUSE\"); \n \n return 0; \n} \nOutput \n[Importing data and creating memory on host]=899.7868977576 msecs. \n[The dimensions of A]=200 x 100 \n[The dimensions of B]=100 x 256 \n[The dimensions of C]=200 x 256 \n[Performing CPU computation]=27.4121886272 msecs. \n[Output results]=386.2818697016 msecs. \n[Freeing Host Memory]=0.2537820050 msecs. \nPress any key to continue . . . \nExercise 3. MatrixDenseMul \nWrite a program to calculate multiplication of two dense matrixes using Cuda \nEx3_MatrixDenseMul.cu \n#include <iostream> \n#include <fstream> \n#include <string> \n#include \"utils/utils.h\" \n#include <cuda_runtime.h> \n \n#define INPUT_FILE \"LAB03.INP\" \n#define OUTPUT_FILE \"LAB03.OUT\" \n \nusing namespace std; \n \n#define THREADS 32 \n#define MAX_BLOCKS(size) \\ \n ((size-1)/THREADS + 1) \n \n// Compute C = A * B \n__global__ void matrixMultiply(float * A, float * B, float * C, \n          int numARows, int numAColumns, \n          int numBRows, int numBColumns, \n          int numCRows, int numCColumns)  \n{ \n    // TODO \n int row = blockIdx.y * blockDim.y + threadIdx.y; \n int col = blockIdx.x * blockDim.x + threadIdx.x; \n  \n if((row < numCRows) && (col < numCColumns))  \n { \n  float value = 0; \n#pragma unroll \n  for (int k = 0; k < numAColumns; ++k) \n   value += A[row * numAColumns + k] * B[k * numBColumns + col]; \n  C[row * numCColumns + col] = value; \n } \n} \n \nint main(int argc, char ** argv) \n{ \n    float *hostA, *hostB, *hostC; // The A, B, and C (output) matrix \n    float *deviceA, *deviceB, *deviceC; \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 32 / 34 \nintnumARows; // number of rows in the matrix A\n    int numAColumns; // number of columns in the matrix A \n    int numBRows; // number of rows in the matrix B \n    int numBColumns; // number of columns in the matrix B \n    int numCRows; // number of rows in the matrix C (you have to set this) \n    int numCColumns; // number of columns in the matrix C (you have to set this) \n \n int i, j; \nCudaTimertimer;\n GpuTimer gpuTimer; \n \n /* Importing data and creating memory on host */ \n ifstream finp(INPUT_FILE); \n timer.Start(); \n // TODO \n finp >> numARows >> numAColumns; \n  \n int byteSizeA = sizeof(float) * numARows * numAColumns; \n checkCudaErrors( cudaMallocHost(&hostA, byteSizeA) ); \n for(i=0; i < numARows; i++) \n { \n  for(j=0; j < numAColumns; j++) \n  { \n   finp >> hostA[i*numAColumns + j]; \n  } \n } \n  \n finp >> numBRows >> numBColumns; \n int byteSizeB = sizeof(float) * numBRows * numBColumns; \n checkCudaErrors( cudaMallocHost(&hostB, byteSizeB) ); \n for(i=0; i < numBRows; i++) \n { \n  for(j=0; j < numBColumns; j++) \n  { \n   finp >> hostB[i*numBColumns + j]; \n  } \n }  \n // Set numCRows and numCColumns \n // TODO \n numCRows = numARows; \nnumCColumns = numBColumns;\n \n // Allocate the hostC matrix \n // TODO \n int byteSizeC = sizeof(float) * numCRows * numCColumns; \n checkCudaErrors( cudaMallocHost(&hostC,byteSizeC) ); \n \n timer.StopAndPrint(cout, \"Importing data and creating memory on host\"); \n cout << \"[The dimensions of A]=\" << numARows << \" x \" << numAColumns << endl; \n    cout << \"[The dimensions of B]=\" << numBRows << \" x \" << numBColumns << endl; \n cout << \"[The dimensions of C]=\" << numCRows << \" x \" << numCColumns << endl; \n \n /* Allocating GPU memory */ \n timer.Start(); \n    // TODO \n checkCudaErrors( cudaMalloc(&deviceA, byteSizeA) ); \n    checkCudaErrors( cudaMalloc(&deviceB, byteSizeB) ); \n    checkCudaErrors( cudaMalloc(&deviceC, byteSizeC) ); \n \n timer.StopAndPrint(cout, \"Allocating GPU memory\"); \n     \n /* Copying input memory to the GPU */", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3686, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2cbff36b-5fab-4232-8e21-16d0ef88dd8e": {"__data__": {"id_": "2cbff36b-5fab-4232-8e21-16d0ef88dd8e", "embedding": null, "metadata": {"page_label": "54", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9185357c-0845-42b0-83a8-1b997675acfe", "node_type": "4", "metadata": {"page_label": "54", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}, "hash": "e467ea8409ddfea60683479a6e326c31e4fccf0393c16bfc668550c58a3be297", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 33 / 34 \ntimer.Start();\n    // TODO \n checkCudaErrors( cudaMemcpy(deviceA, hostA, byteSizeA, cudaMemcpyHostToDevice) ); \n    checkCudaErrors( cudaMemcpy(deviceB, hostB, byteSizeB, cudaMemcpyHostToDevice) ); \n \n timer.StopAndPrint(cout, \"Copying input memory to the GPU\"); \n     \n    /* Initialize the grid and block dimensions */ \n// TODO\n    dim3 block_size(THREADS, THREADS); \n dim3 grid_size(MAX_BLOCKS(numCColumns), MAX_BLOCKS(numCRows)); \n \n /* Launch the GPU Kernel */ \n gpuTimer.Start(); \n // TODO \n matrixMultiply<<<grid_size, block_size>>>(deviceA, deviceB, deviceC, \n                                      numARows, numAColumns, \n                                      numBRows, numBColumns, \n                                      numCRows, numCColumns); \n \n \n    cudaThreadSynchronize(); \n gpuTimer.StopAndPrint(cout, \"Performing CUDA computation\"); \n     \n /* Copying output memory to the CPU */ \n timer.Start(); \n    // TODO \n checkCudaErrors( cudaMemcpy(hostC, deviceC, byteSizeC, cudaMemcpyDeviceToHost) ); \n \n timer.StopAndPrint(cout, \"Copying output memory to the CPU\"); \n \n /* Freeing GPU Memory */ \n timer.Start(); \n    // TODO \n checkCudaErrors( cudaFree(deviceA) ); \n    checkCudaErrors( cudaFree(deviceB) ); \n    checkCudaErrors( cudaFree(deviceC) ); \n \n \n timer.StopAndPrint(cout, \"Freeing GPU Memory\"); \n /* Output results */ \n ofstream fout(OUTPUT_FILE); \n timer.Start(); \n // TODO \n fout << numCRows << \" \" << numCColumns << endl; \n for(i=0;i < numCRows; i++) \n { \nfor(j=0;j < numCColumns; j++)\n  { \n   fout << hostC[i * numCColumns + j] << \" \";\n  } \n  fout << endl; \n } \n \n timer.StopAndPrint(cout, \"Output results\"); \n fout.close(); \n \n /* Freeing Host Memory */ \n timer.Start(); \n \n cudaFreeHost(hostA); \n cudaFreeHost(hostB); \nIntroduction to Cuda (10 \u2013 2014)  LAB \n \n \n\u0110NT  Trang 34 / 34 \ncudaFreeHost(hostC);\n \n timer.StopAndPrint(cout, \"Freeing Host Memory\"); \n \n system(\"PAUSE\"); \n \n    return 0; \n} \n \nOutput \n[Importing data and creating memory on host]=884.9145258475 msecs. \n[The dimensions of A]=200 x 100 \n[The dimensions of B]=100 x 256 \n[The dimensions of C]=200 x 256 \n[Allocating GPU memory]=1.2577137600 msecs. \n[Copying input memory to the GPU]=0.1651449077 msecs. \n[Performing CUDA computation]=3.6639039516 msecs. \n[Copying output memory to the CPU]=0.1506830655 msecs. \n[Freeing GPU Memory]=0.1768076836 msecs. \n[Output results]=348.1735159817 msecs. \n[Freeing Host Memory]=0.4119292471 msecs. \nPress any key to continue . . . \n--- The End ---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2544, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9ec3604b-9a31-4557-8bc8-a72b61eabd67": {"node_ids": ["ccb91132-a660-46cf-9e1a-8720ccbf1e75", "055f7911-f10d-414c-9b99-6c86b0bf5c76"], "metadata": {"page_label": "9", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "5442007a-ea21-466d-a600-3410ddb6e43a": {"node_ids": ["3ca4a663-9aa4-479c-91c5-84cb7201c78d", "be30aa92-06a0-4d78-90be-6a86e202a92a"], "metadata": {"page_label": "18", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "288e88b1-1570-45d6-bcce-1e58145e2728": {"node_ids": ["c1ee4ff4-31d7-4119-9062-a6999afe2652", "3690a421-73f2-4c3e-8797-48cc02938368", "33636abc-bb42-449e-9dca-85640ddfb282"], "metadata": {"page_label": "27", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "c6807474-641e-4196-bb0b-1dbedff9327f": {"node_ids": ["0b99868a-ce55-4301-a3a9-6acfbce7558e", "a9b6d699-f427-4b06-98f9-46ec99d4a94b"], "metadata": {"page_label": "36", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "e5bd3a03-8e5d-433c-b202-6b9dc83867cb": {"node_ids": ["2ee0afd8-8c71-47a2-a5ad-f3fed96e25f1"], "metadata": {"page_label": "37", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "0c911227-57fa-4b8e-ba51-16ba67a514c2": {"node_ids": ["bbe846b9-04c6-443a-9dbe-e3610a43098a"], "metadata": {"page_label": "38", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "30fa5668-f78e-45dd-97af-3bb10be09c12": {"node_ids": ["ca4c042f-6b3e-41e8-a342-763152bca325"], "metadata": {"page_label": "39", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "f99f82ef-ae58-48c4-b894-33664dc5e720": {"node_ids": ["e89d6d60-6436-487f-9798-e963373c4a8f"], "metadata": {"page_label": "40", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "aee45c45-154f-457e-960d-224f970c0dbf": {"node_ids": ["90844d31-4b7e-4bf9-af6e-4a30471700cf"], "metadata": {"page_label": "41", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "f1ee026f-34f1-409a-9670-a18467d09a27": {"node_ids": ["9d4660bf-df4c-4d79-92ec-3f5be126895d"], "metadata": {"page_label": "42", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "1a7d4449-d5ee-45d0-883d-9b210a387c36": {"node_ids": ["3ac5f7e9-b7f1-40ca-91a4-1a29d0162a8f", "a026187e-926c-478e-a8f4-af43d74cddab"], "metadata": {"page_label": "43", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "abcba890-1cef-481e-9759-ab57d50aca14": {"node_ids": ["6d8318e4-59b5-4e82-9486-a3c925914cbf"], "metadata": {"page_label": "44", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "324cead7-05de-4daf-9ede-5067534a5fda": {"node_ids": ["9eea7ae4-862f-48eb-b24b-3203c98f7e8b", "618116f8-9629-453e-b9d5-b446a11909d3"], "metadata": {"page_label": "45", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "4a3369f8-4bf6-4381-a948-38364e8d8704": {"node_ids": ["5cb4e034-3706-45a3-a9e3-d1f0fcfbb8a9"], "metadata": {"page_label": "46", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "b50c50dd-b71f-4ed8-a606-f386a37778c5": {"node_ids": ["70ca0297-aac0-48f8-931c-a6e8c54bb1a2"], "metadata": {"page_label": "47", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "c7fa74bd-c3ca-419b-8cfe-eac07d9741e1": {"node_ids": ["7a130a70-c6a0-4bb4-9623-8162bcf6bca6"], "metadata": {"page_label": "48", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "a44f7418-5434-447b-9171-63ea3199f936": {"node_ids": ["fd2ec0b3-f277-406d-8591-2e2b73bf0344"], "metadata": {"page_label": "49", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "f01b4871-1835-4944-a695-b1e57ed3484a": {"node_ids": ["a86897b4-887a-4667-8b06-0a56093135c2"], "metadata": {"page_label": "50", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "590fe819-90f6-449f-b71c-d2e0ca8e6d78": {"node_ids": ["1090be1b-5a94-4e87-8531-33add6ee482a", "76344d78-ec43-4e55-aadb-6de497a5c056"], "metadata": {"page_label": "51", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "1b5d2055-b0bb-4f64-b0e6-c434be595952": {"node_ids": ["e524f6e7-9c59-42b4-9006-0e77378ff996", "1b7fb809-a873-405f-9988-1c9f9b0243db"], "metadata": {"page_label": "52", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "4573aa17-c9b8-4546-a654-7a40acaee3ca": {"node_ids": ["a0ba49a6-f874-43b1-82c5-a50b0e30bd3e", "2456fc04-9ee7-4506-80f0-2ee5273c1be7"], "metadata": {"page_label": "53", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}, "9185357c-0845-42b0-83a8-1b997675acfe": {"node_ids": ["2cbff36b-5fab-4232-8e21-16d0ef88dd8e"], "metadata": {"page_label": "54", "file_name": "cuda.pdf", "file_path": "cuda.pdf", "file_type": "application/pdf", "file_size": 5788077, "creation_date": "2024-12-25", "last_modified_date": "2024-12-25"}}}}